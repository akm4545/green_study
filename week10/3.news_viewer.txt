--------------------------- axios로 api 호출해서 데이터 받아오기 ---------------------------
yarn create react-app news-viewer

npm install axios

App.js
import React, { useState } from 'reat'
import axios from 'axios'

const App = () => {
    const [data, setData] = useState(null)
    const onClick = () => {
        axios.get('https://jsonplaceholder.typicode.com/todos/1')
            .then(response => {
                setData(response.data)
            })
    }

    return (
        <div>
            <div>
                <button onClick={onClick}>
                    불러오기
                </button>
            </div>
            {data && 
                <textarea 
                    rows={7}
                    value={JSON.stringify(data, null, 2)}
                    readOnly={true}
                />
            }
        </div>
    )
}

export default App

async 적용
App.js
import React, { useState } from 'reat'
import axios from 'axios'

const App = () => {
    const [data, setData] = useState(null)
    const onClick = async () => {
        try {
            const response = await axios.get('https://jsonplaceholder.typicode.com/todos/1')
            setData(response.data)
        }catch(e){
            console.log(e)
        }
    }

    return (
        <div>
            <div>
                <button onClick={onClick}>
                    불러오기
                </button>
            </div>
            {data && 
                <textarea 
                    rows={7}
                    value={JSON.stringify(data, null, 2)}
                    readOnly={true}
                />
            }
        </div>
    )
}

export default App


--------------------------- newsapi API 키 발급 ---------------------------
https://newsapi.org/register에 가입하고 키를 발급받는다

App.js
import React, { useState } from 'reat'
import axios from 'axios'

const App = () => {
    const [data, setData] = useState(null)
    const onClick = async () => {
        try {
            //변경
            const response = await axios.get('https://newsapi.org/v2/top-headlines?country=kr&apiKey=api키')
            setData(response.data)
        }catch(e){
            console.log(e)
        }
    }

    return (
        <div>
            <div>
                <button onClick={onClick}>
                    불러오기
                </button>
            </div>
            {data && 
                <textarea 
                    rows={7}
                    value={JSON.stringify(data, null, 2)}
                    readOnly={true}
                />
            }
        </div>
    )
}

export default App

--------------------------- 뉴스 뷰어 UI 만들기 ---------------------------
npm install styled-components

src/components/NewsItem.js
import styled from 'styled-components'

const NewsItemBlock = styled.div`
    display: flex;

    .thumbnail {
        margin-right: 1rem;

        img{
            display: block;
            width: 160px;
            height: 100px;
            object-fit: cover;
        }
    }

    .contents {
        h2 {
            margin: 0;

            a {
                color: black
            }
        }

        p {
            margin: 0;
            line-heigth: 1.5;
            margin-top: 0.5rem;
            white-space: normal;
        }
    }

    & + & {
        margin-top: 3rem;
    }
`;

const NewsItem = ({ article }) => {
    const { title, description, url, urlToImage } = article

    return (
        <NewsItemBlock>
            {urlToImage && (
                <div className="thumbnail">
                    <a href={url} target="_blank" rel="noopener nereferrer">
                        <img src={urlToImage} alt="thumbnail" />
                    </a>
                </div>
            )}
            <div className="contents">
                <h2>
                    <a href={url} target="_blank" rel="noopener noreferrer">
                        {title}
                    </a>
                </h2>
                <p>{description}</p>
            </div>
        </NewsItemBlock>
    )
}

export default NewsItem

src/components/NewsList.js
import styled from 'styled-components'
import NewsItem from './NewsItem'

const NewsListBlock = styled.div`
    box-sizing: border-box;
    padding-bottom: 3rem;
    width: 768px;
    margin: 0 auto;
    margin-top: 2rem;
    @media screen and (max-width: 768px) {
        width: 100%;
        padding-left: 1rem;
        padding-right: 1rem;
    }
`;

const sampleArticle = {
    title: '제목',
    description: '내용',
    url: 'https://google.com',
    urlToImage: 'https://via.placeholder.com/160'
}

const NewsList = () => {
    return (
        <NewsListBlock>
            <NewsItem article={sampleArticle} />
            <NewsItem article={sampleArticle} />
            <NewsItem article={sampleArticle} />
            <NewsItem article={sampleArticle} />
            <NewsItem article={sampleArticle} />
            <NewsItem article={sampleArticle} />
        </NewsListBlock>
    )
}

export default NewsList

App.js
import NewsList from './components/NewsList'

const App = () => {
    return <NewsList />
}

export default App

--------------------------- 데이터 연동 ---------------------------
useEffect를 사용하여 컴포넌트가 처음 렌더링되는 시점에 API 요청
useEffect에 등록하는 함수에 async를 붙이면 안된다
useEffect에서 반환해야 하는 값은 뒷정리 함수이기 때문에 함수 내부에서 async/await를 사용하고 싶다면
함수 내부에 async 키워드가 붙은 또 다른 함수를 만들어서 사용해 주어야 한다

src/components/NewsList.js
import styled from 'styled-components'
import NewsItem from './NewsItem'
//추가
import { useState, useEffect } from 'react'
import axios from 'axios'

const NewsListBlock = styled.div`
    box-sizing: border-box;
    padding-bottom: 3rem;
    width: 768px;
    margin: 0 auto;
    margin-top: 2rem;
    @media screen and (max-width: 768px) {
        width: 100%;
        padding-left: 1rem;
        padding-right: 1rem;
    }
`;

const NewsList = () => {
    //추가
    const [articles, setArticles] = useState(null)
    const [loading, setLoading] = useState(false)

    useEffect(() => {
        // async를 사용하는 함수 따로 선언
        const fetchData = async () => {
            setLoading(true)

            try{
                const response = await axios.get('https://newsapi.org/v2/top-headlines?country=kr&apiKey=api 키)
                setArticles(response.data.articles)
            }catch(e){
                console.log(e)
            }

            setLoading(false)
        }

        fetchData()
    }, [])

    if(loading) {
        return <NewsListBlock>대기 중...</NewsItemBlock>
    } 

    //article을 조회하여 해당 값이 null이 아닌지 검사
    //이 작업을 하지 않으면 아직 데이터가 없을 때 map 함수에서 로유 발생
    //흰 화면만 보이게 된다
    if(!articles){
        return null;
    }

    return (
        <NewsListBlock>
            {articles.map(article => (
                <NewsItem 
                    key={article.url}
                    article={article}
                />
            ))}
        </NewsListBlock>
    )
}

export default NewsList

--------------------------- 카테고리 기능 구현 ---------------------------
src/components/Categories.js
import styled from 'styled-components'

const categories = [
    {
        name: 'all',
        text: '전체보기'
    },
    {
        name: 'business',
        text: '비즈니스'
    },
    {
        name: 'entertainment',
        text: '엔터테인먼트'
    },
    {
        name: 'health',
        text: '건강'
    },
    {
        name: 'science',
        text: '과학'
    },
    {
        name: 'sports',
        text: '스포츠'
    },
    {
        name: 'technology',
        text: '기술'
    },
]

const CategoriesBlock = styled.div`
    display: flex;
    padding: 1rem;
    width: 768px;
    margin: 0 auto;
    @media screen and (max-width: 768px){
        width: 100%;
        overflow-x: auto;
    }
`;

const Category = styled.div`
    font-size: 1.125reml;
    cursor: pointer;
    white-space: pre;
    text-decoration: none;
    color: inherit;
    padding-bottom: 0.25rem;

    &:hover{
        color: #495057;
    }

    & + & {
        margin-left: 1rem;
    }
`;

const Categories = () => {
    return (
        <CategoriesBlock>
            {categories.map(c => (
                <Category 
                    key={c.name}
                >
                    {c.text}
                </Category>
            ))}
        </CategoriesBlock>
    )
}

export default Categories

App.js
import NewsList from './components/NewsList'
import Categories from './components/Categories'

const App = () => {
    return (
        <>
            <Categories />
            <NewsList />
        </>
    )
}

export default App


App.js
import NewsList from './components/NewsList'
import Categories from './components/Categories'
//추가
import { useState, useCallback } from 'react'

const App = () => {
    const [category, setCategory] = useState('all')
    const onSelect = useCallback(category => setCategory(category), [])


    return (
        <>
            <Categories 
                category={category} 
                onSelect={onSelect}
            />
            <NewsList 
                category={category}
            />
        </>
    )
}

export default App


src/components/Categories.js
//추가
import styled, { css } from 'styled-components'

const categories = [
    {
        name: 'all',
        text: '전체보기'
    },
    {
        name: 'business',
        text: '비즈니스'
    },
    {
        name: 'entertainment',
        text: '엔터테인먼트'
    },
    {
        name: 'health',
        text: '건강'
    },
    {
        name: 'science',
        text: '과학'
    },
    {
        name: 'sports',
        text: '스포츠'
    },
    {
        name: 'technology',
        text: '기술'
    },
]

const CategoriesBlock = styled.div`
    display: flex;
    padding: 1rem;
    width: 768px;
    margin: 0 auto;
    @media screen and (max-width: 768px){
        width: 100%;
        overflow-x: auto;
    }
`;

const Category = styled.div`
    font-size: 1.125reml;
    cursor: pointer;
    white-space: pre;
    text-decoration: none;
    color: inherit;
    padding-bottom: 0.25rem;

    &:hover{
        color: #495057;
    }

    //추가
    ${props =>
        props.active && css`
            font-weight: 600;
            border-bottom: 2px solid #22b8cf;
            color: #22b8cf;
            &:hover{
                color: #3bc9db;
            }
    `}

    & + & {
        margin-left: 1rem;
    }
`;

//추가
const Categories = ({ onSelect, category }) => {
    return (
        <CategoriesBlock>
            //추가
            {categories.map(c => (
                <Category 
                    key={c.name}
                    active={category === c.name}
                    onClick={() => onSelect(c.name)}
                >
                    {c.text}
                </Category>
            ))}
        </CategoriesBlock>
    )
}

export default Categories

--------------------------- API 호출 시 카테고리 지정하기 ---------------------------
src/components/NewsList.js
import styled from 'styled-components'
import NewsItem from './NewsItem'
import { useState, useEffect } from 'react'
import axios from 'axios'

const NewsListBlock = styled.div`
    box-sizing: border-box;
    padding-bottom: 3rem;
    width: 768px;
    margin: 0 auto;
    margin-top: 2rem;
    @media screen and (max-width: 768px) {
        width: 100%;
        padding-left: 1rem;
        padding-right: 1rem;
    }
`;

//추가
const NewsList = ({ category }) => {
    const [articles, setArticles] = useState(null)
    const [loading, setLoading] = useState(false)

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true)

            //추가
            try{
                const query = category === 'all' ? '' : `&category=${category}`;
                const response = await axios.get(`https://newsapi.org/v2/top-headlines?country=kr${category}&apiKey=api 키`)
                setArticles(response.data.articles)
            }catch(e){
                console.log(e)
            }

            setLoading(false)
        }

        fetchData()
    //추가
    }, [category])

    if(loading) {
        return <NewsListBlock>대기 중...</NewsItemBlock>
    } 

    if(!articles){
        return null;
    }

    return (
        <NewsListBlock>
            {articles.map(article => (
                <NewsItem 
                    key={article.url}
                    article={article}
                />
            ))}
        </NewsListBlock>
    )
}

export default NewsList

--------------------------- 리액트 라우터 적용 ---------------------------
npm install react-router-dom

index.js
import ReactDOM from 'react-dom'
import './index.css'
import App from './App'
import { BrowserRouter } from 'react-router-dom'

ReactDOM.render(
    <BrowserRouter>
        <App />
    </BrowserRouter>
    document.getElementById('root')
)

--------------------------- NewsPage 생성 ---------------------------
pages/NewsPage.js
import { useParams } from 'react-router-dom'
import Categories from '../components/Categories'
import NewsList from '../components/NewsList'

const NewsPage = () => {
    const params = useParams()
    //카테고리 미선택 시 all로 사용
    const category = params.category || 'all'

    return (
        <>
            <Categories />
            <NewsList category={category} />
        </>
    )
}

export default NewsPage

App.js
import { Route, Routes } from 'react-router-dom'
import NewsPage from './pages/NewsPage'

const App = () => {
    return (
        <Routes>
            <Route path="/" element={<NewsPage />} />
            <Route path="/:category" element={<NewsPage />} />
        </Routes>
    )
}

export default App

스타일을 NavLink로 대체
src/components/Categories.js
import styled from 'styled-components'
import { NavLink } from 'react-router-dom'

const categories = [
    {
        name: 'all',
        text: '전체보기'
    },
    {
        name: 'business',
        text: '비즈니스'
    },
    {
        name: 'entertainment',
        text: '엔터테인먼트'
    },
    {
        name: 'health',
        text: '건강'
    },
    {
        name: 'science',
        text: '과학'
    },
    {
        name: 'sports',
        text: '스포츠'
    },
    {
        name: 'technology',
        text: '기술'
    },
]

const CategoriesBlock = styled.div`
    display: flex;
    padding: 1rem;
    width: 768px;
    margin: 0 auto;
    @media screen and (max-width: 768px){
        width: 100%;
        overflow-x: auto;
    }
`;

//추가 변경
const Category = styled(NavLink)`
    font-size: 1.125reml;
    cursor: pointer;
    white-space: pre;
    text-decoration: none;
    color: inherit;
    padding-bottom: 0.25rem;

    &:hover{
        color: #495057;
    }

    &.active{
        font-weight: 600;
        border-bottom: 2px solid #22b8cf;
        color: #22b8cf;
        &:hover{
            color: #3bc9db;
        }
    }

    & + & {
        margin-left: 1rem;
    }

`;

const Categories = ({ onSelect, category }) => {
    return (
        <CategoriesBlock>
            {categories.map(c => (
                <Category 
                    key={c.name}
                    //추가
                    className={({ isActive }) => (isActive ? 'active' : undefined)}
                    to={c.name === 'all' ? '/' : `/${c.name}`}
                >
                    {c.text}
                </Category>
            ))}
        </CategoriesBlock>
    )
}

export default Categories

--------------------------- usePromise 커스텀 Hook 만들기 ---------------------------
API 호출처럼 Promise를 사용해야 하는 경우 더욱 간결하게 사용

lib/usePromise.js
import { useState, useEffect } from 'react'

export default function usePromise(promiseCreator, deps){
    // 대기 중/완료/실패에 대한 상태 관리
    const [loading, setLoading] = useState(false)
    const [resolve, setResolved] = useState(null)
    const [error, setError] = useState(null)

    useEffect(() => {
        const process = async () => {
            setLoading(true)

            try {
                const resolved = await promiseCreator()
                setResolved(resolved)
            }catch(e){
                setError(e)
            }

            setLoading(false)
        }

        process()
    }, deps)

    return [loading, resolved, error]
}

src/components/NewsList.js
import styled from 'styled-components'
import NewsItem from './NewsItem'
import { useState, useEffect } from 'react'
import axios from 'axios'
//추가
import usePromise from '../lib/usePromise'

const NewsListBlock = styled.div`
    box-sizing: border-box;
    padding-bottom: 3rem;
    width: 768px;
    margin: 0 auto;
    margin-top: 2rem;
    @media screen and (max-width: 768px) {
        width: 100%;
        padding-left: 1rem;
        padding-right: 1rem;
    }
`;

const NewsList = ({ category }) => {
    //추가
    const [loading, response, error] = usePromise(() => {
        const query = category === 'all' ? '' : `&category=${category}`;

        return axios.get(`https://newsapi.org/v2/top-headlines?country=kr${category}&apiKey=api 키`)
    }, [category])

    if(loading) {
        return <NewsListBlock>대기 중...</NewsItemBlock>
    } 

    //추가
    if(!response){
        return null;
    }

    //추가
    if(error){
        return <NewsListBlock>에러 발생!</NewsListBlock>
    }

    //추가
    const { articles } = response.data

    return (
        <NewsListBlock>
            {articles.map(article => (
                <NewsItem 
                    key={article.url}
                    article={article}
                />
            ))}
        </NewsListBlock>
    )
}

export default NewsList