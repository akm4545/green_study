--------------------------- 비동기 작업의 이해 ---------------------------
웹 애플리케이션에서 서버 쪽 데이터가 필요할 때는 Ajax 기법을 사용하여 서버의 
API를 호출함으로써 데이터를 수신한다

서버의 API를 사용해야 할 때는 네트워크 송수신 과정에서 시간이 걸리기 떄문에
작업이 즉시 처리되는 것이 아니라 응답을 받을 때까지 기다렸다가 전달받은 응답 데이터를 처리한다

만약 작업을 동기적으로 처리한다면 요청이 끝날 때까지 기다르는 동안 중지 상태가 되기 떄문에
다른 작업을 할 수 없다

비동기적으로 처리한다면 웹 애플리케이션이 멈추지 않기 때문에 동시에 여러 가지 요청을 처리할 수도, 기다리는
과정에서 다른 함수도 호출할 수 있다

API 호출 외에도 작업을 비동기로 처리할 때가 있는데 setTimeout 함수를 사용하여 특정 작업을 예약할 때이다
예시
function printMe() {
    console.log('Hello World!')
}

setTimeout(printMe, 3000)
console.log('대기 중')

--------------------------- 콜백 함수를 사용하여 비동기 처리 ---------------------------
파라미터 값이 주어지면 1초 뒤에 10을 더해서 반환하는 함수가 있고 해당 함수가 처리된 직후 어떠한
작업을 하고 싶다면...
function increase(number, callback) {
    setTimeout(() => {
        const result = number + 10

        if(callback){
            callback(result)
        }
    }, 1000)
}

increase(0, result => {
    console.log(result)
})

1초에 걸쳐서 10, 20, 30, 40과 같은 형태로 여러 번 순차적으로 처리하고 싶다면 콜백 함수를 중첩해서 구현
function increase(number, callback) {
    setTimeout(() => {
        const result = number + 10

        if(callback){
            callback(result)
        }
    }, 1000)
}

console.log('작업 시작')
increase(0, result => {
    console.log(result)
    increase(result, result => {
        console.log(result)
        increase(result, result => {
            console.log(result)
            increase(result, result => {
                console.log(result)            
                console.log('작업 완료')
            })        
        })
    })
})

이런 형태의 코들르 콜백 지옥이라고 부른다
웬만하면 지양해야 할 형태의 코드다

--------------------------- Promise ---------------------------
콜백 지옥 같은 코드가 형성되지 않게 하는 방안으로 ES6에 도입된 기능

function increase(number) {
    const promise = new Promise((resolve, reject) => {
        //resolve는 성공, reject는 실패
        setTimeout(() => {
            const result = number + 10

            if(result > 50){
                const e = new Error('NumberTooBig')

                return reject(e)
            }

            //number 값에 +10 후 성공 처리
            resolve(result)
        }, 1000)
    })

    return promise
}

increase(0)
    .then(number => {
        // Promise에서 resolve된 값은 .then을 통해 받아 올 수 있음
        console.log(number)

        return increase(number) //Promise 리턴
    })
    .then(number => {
        //또 .then으로 처리 가능
        console.log(number)

        return increase(number) 
    })
    .then(number => {
        console.log(number)

        return increase(number) 
    })
    .then(number => {
        console.log(number)

        return increase(number) 
    })
    .then(number => {
        console.log(number)

        return increase(number)
    })
    .catch(e => {
        //도중 에러가 발생하면 .catch를 통해 알 수 있음
        console.log(e)
    })

여러 작업을 처리해도 함수를 여러 번 감싸는 것이 아니라
.then을 사용하여 그 다음 작업을 설정하기 때문에 콜백 지옥이 형성되지 않는다

--------------------------- async/await ---------------------------
Promise를 더욱 쉽게 사용할 수 있도록 해 주는 ES2017(ES8) 문법
함수의 앞부분에 async 키워드를 추가하고 해당 함수 내부에서 Promise의 앞부분에 await 키워드 사용
이렇게 하면 Promise가 끝날 때까지 기다리고 결과 값을 특정 변수에 담을 수 있다

function increase(number) {
    const promise = new Promise((resolve, reject) => {
        setTimeout(() => {
            const result = number + 10

            if(result > 50){
                const e = new Error('NumberTooBig')

                return reject(e)
            }

            resolve(result)
        }, 1000)
    })

    return promise
}

async function runTask() {
    try {
        let result = await increase(0)
        console.log(result)
        result = await increase(result)
        console.log(result)
        result = await increase(result)
        console.log(result)
        result = await increase(result)
        console.log(result)
        result = await increase(result)
        console.log(result)
        result = await increase(result)
        console.log(result)
    }catch(e) {
        console.log(e)
    }
}