--------------------------- Hooks ---------------------------
리액트 16.8 버전에 새로 도입된 기능
함수 컴포넌트에서 할 수 없었던 다양한 작업을 할 수 있게 지원


--------------------------- useState ---------------------------
함수 컴포넌트에서도 가변적인 상태를 지닐 수 있게 해준다
함수 컴포넌트에서 상태를 관리해야 한다면 이 Hook을 사용한다

useState에는 기본값을 넣어 준다
함수 호출 시 배열을 반환하는데 
첫 번째 원소는 상태 값
두 번째 원소는 상태를 설정하는 함수 - 이 함수에 값을 세팅하고 호출하면 리렌더링이 일어난다
const [value, setValue] = useState(0)

Counter.js
import React, { useState } from 'react'

const Counter = () => {
    const [value, setValue] = useState(0)

    return (
        <div>
            <p>
                현재 카운터 값은 <b>{value}</b>입니다.
            </p>
            <button onClick={() => setValue(value + 1)}>+1</button>
            <button onClick={() => setValue(value - 1)}>-1</button>
        </div>
    )
}

export default Counter;

App.js
import Counter from './Counter'

const App = () => {
    return <Counter />
}

export default App


--------------------------- 여러개의 useState 사용 ---------------------------
Info.js
import React, { useState } from 'react'

const Info = () => {
    const [name, setName] = useState('')
    const [nickname, setNickname] = useState('')

    const onChangeName = e => {
        setName(e.target.value)
    }

    const onChangeNickname = e => {
        setNickname(e.target.value)
    }

    return (
        <div>
            <div>
                <input value={name} onChnage={onChangeName} />
                <input value={nickname} onChnage={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    )
}

export default Info


--------------------------- useEffect ---------------------------
리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook
클래스형 컴포넌트의 componentDidMount와 componentDidUpdate를 합친 형태

Info.js
import { useState, useEffect } from 'react'

const Info = () => {
    const [name, setName] = useState('')
    const [nickname, setNickname] = useState('')

    useEffect(() => {
        console.log('렌더링이 완료되었습니다!')
        console.log({
            name,
            nickname
        })
    })

    const onChangeName = e => {
        setName(e.target.value)
    }

    const onChangeNickname = e => {
        setNickname(e.target.value)
    }

    return (
        <div>
            <div>
                <input value={name} onChnage={onChangeName} />
                <input value={nickname} onChnage={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    )
}

export default Info


마운트될 때만 실행
Info.js
import { useState, useEffect } from 'react'

const Info = () => {
    const [name, setName] = useState('')
    const [nickname, setNickname] = useState('')

    //함수의 두 번째 파라미터로 비어 있는 배열 전달
    useEffect(() => {
        console.log('마운트될 때만 실행됩니다.')
    }, [])

    const onChangeName = e => {
        setName(e.target.value)
    }

    const onChangeNickname = e => {
        setNickname(e.target.value)
    }

    return (
        <div>
            <div>
                <input value={name} onChnage={onChangeName} />
                <input value={nickname} onChnage={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    )
}


특정 값이 업데이트될 때만 실행
Info.js
import { useState, useEffect } from 'react'

const Info = () => {
    const [name, setName] = useState('')
    const [nickname, setNickname] = useState('')

    //함수의 두 번째 파라미터로 비어 있는 배열 전달
    //변화를 감지할 값을 넣어주면 된다
    useEffect(() => {
        console.log('name')
    }, [name])

    const onChangeName = e => {
        setName(e.target.value)
    }

    const onChangeNickname = e => {
        setNickname(e.target.value)
    }

    return (
        <div>
            <div>
                <input value={name} onChnage={onChangeName} />
                <input value={nickname} onChnage={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    )
}


뒷정리하기
컴포넌트가 언마운트되기 전이나 업데이트되기 직전에 어떠한 작업을 수행하고 싶다면 useEffect에서 뒷정리 함수를 반환해 주어야 한다
Info.js
import { useState, useEffect } from 'react'

const Info = () => {
    const [name, setName] = useState('')
    const [nickname, setNickname] = useState('')

    //뒷정리 함수 반환
    useEffect(() => {
        console.log('effect')
        console.log(name)

        return () => {
            console.log('cleanup')
            console.log(name)
        }
    }, [name])

    const onChangeName = e => {
        setName(e.target.value)
    }

    const onChangeNickname = e => {
        setNickname(e.target.value)
    }

    return (
        <div>
            <div>
                <input value={name} onChnage={onChangeName} />
                <input value={nickname} onChnage={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    )
}

App.js
import React, { useState } from 'react'
import Info from './Info'

const App = () => {
    const [visible, setVisible] = useState(false)

    return (
        <div>
            <button
                onClick={() => {
                    setVisible(!visible)
                }}
            >
                {visible ? '숨기기' : '보이기'}
            </button>
            <ht />
            {visible && <Info />}
        </div>
    )
}

export default App


오직 언마운트 때만 클린업 함수 실행
Info.js
import { useState, useEffect } from 'react'

const Info = () => {
    const [name, setName] = useState('')
    const [nickname, setNickname] = useState('')

    useEffect(() => {
        console.log('effect')
        
        return () => {
            console.log('unmount')
        }
    }, [])

    const onChangeName = e => {
        setName(e.target.value)
    }

    const onChangeNickname = e => {
        setNickname(e.target.value)
    }

    return (
        <div>
            <div>
                <input value={name} onChnage={onChangeName} />
                <input value={nickname} onChnage={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    )
}


--------------------------- useReducer ---------------------------
useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트 해주고 
싶을 때 사용하는 Hook

리듀서는 현재 상태, 업데이트를 위해 필요한 정보를 담은 액션(action)값을 전달받아
새로운 상태를 반환하는 함수 
리듀서 함수에서 새로운 상태를 만들 때는 반드시 불변성을 지켜주어야 한다

function reducer(state, action){
    return {...} //불변성을 지키면서 업데이트한 새로운 상태를 반환
}

액션 값의 형태
{
    type: "INCREMENT",
    //다른 값들이 필요하다면 추가로 들어감
}

useReducer에서 사용하는 액션 객체는 반드시 type을 지니고 있을 필요가 없다
심지어 객체가 아니라 문자열이나 숫자여도 상관없다

useReducer로 counter 구현
ReducerCounter.js
import React, { useReducer } from 'react'

function reducer(state, action) {
    // action.type에 따라 다른 작업 수행
    switch(action.type) {
        case 'INCREMENT':
            return { value: state.value + 1 }
        case 'DECREMENT':
            return { value: state.value -1 }    
        default:
            //아무것도 해당되지 않을 때 기존 상태 반환
            return state
    }
}

const Counter = () => {
    const [state, dispatch] = useReducer(reducer, { value: 0 })

    return (
        <div>
            <p>
                현재 카운터 값은 <b>{state.value}</b>입니다.
            </p>
            <button onClick={() => dispatch({ type: 'INCREMENT' })}>+1</button>
            <button onClick={() => dispatch({ type: 'DECREMENT' })}>-1</button>
        </div>
    )
}

export default Counter

useReducer의 첫 번째 파라미터에는 리듀서 함수(액션에 따른 상태 변경)를 넣고 두 번째 파라미터에는 해당 리듀서의 기본값을 넣는다
리듀서는 state와 dispatch 함수를 받아 오는데 
state = 현재 상태
dispatch = 액션을 발생시키는 함수 dispatch(action)과 같은 형태로 함수 안에 파라미터로 액션 값을 넣어 주면 리듀서 함수가 호출
useReducer를 사용했을 때의 가장 큰 장점은 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다는 것이다

useReducer로 인풋 상태 관리하기
e.target 값을 액션 값으로 사용

Info.js
import { useReducer } from 'react'

function reducer(state, action){
    return {
        ...state,
        [action.name]: action.value
    }
}

const Info = () => {
    const [state, dispatch] = useReducer(reducer, {
        name: '',
        nickname: ''
    })
    const { name, nickname } = state

    cons onChange = e => {
        dispatch(e.target)
    }

    return (
        <div>
            <div>
                <input name="name" value={name} onChnage={onChange} />
                <input name="nickname" value={nickname} onChnage={onChange} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    )
}

--------------------------- useMemo ---------------------------
useMemo를 사용하면 함수 컴포넌트 내부의 연산을 최적화 할 수 있다
Average.js
import React, { useState } from 'react'

const getAverage = numbers => {
    console.log('평균값 계산 중..')

    if(numbers.length === 0) {
        return 0
    }

    const sum = numbers.reduce((a, b) => a + b)

    return sum / numbers.length
}

const Average = () => {
    const [list, setList] = useState([])
    const [number, setNumber] = useState('')

    const onChange = e => {
        setNumber(e.target.value)
    }

    const onInsert = e => {
        const nextList = list.concat(parseInt(number))

        setList(nextList)
        setNumber('')
    }

    return (
        <div>
            <input value={number} onChange={onChange} />
            <button onClick={onInsert}>등록</button>
            <ul>
                {list.map((value, index) => (
                    <li key={index}>{value}</li>
                ))}
            </ul>
            <div>
                <b>평균값:</b> {getAverage(list)}
            </div>
        </div>
    )
}

export default Average

숫자 등록뿐만 아니라 인풋 내용이 수정될 때도 함수를 호출
인풋 내용이 바뀔 떄는 평균값을 다시 계산할 필요가 없으므로 자원 낭비

useMemo Hook을 사용하여 이런 작업을 최적화 할 수 있다
렌더링하는 과정에서 특정 값이 바뀌었을 떄만 연산을 실행하고 원하는 값이 바뀌지 않았다면 이전에 연산했던 결과를 다시 사용
Average.js
import React, { useState, useMemo } from 'react'

const getAverage = numbers => {
    console.log('평균값 계산 중..')

    if(numbers.length === 0) {
        return 0
    }

    const sum = numbers.reduce((a, b) => a + b)

    return sum / numbers.length
}

const Average = () => {
    const [list, setList] = useState([])
    const [number, setNumber] = useState('')

    const onChange = e => {
        setNumber(e.target.value)
    }

    const onInsert = e => {
        const nextList = list.concat(parseInt(number))

        setList(nextList)
        setNumber('')
    }

    const avg = useMemo(() => getAverage(list), [list])

    return (
        <div>
            <input value={number} onChange={onChange} />
            <button onClick={onInsert}>등록</button>
            <ul>
                {list.map((value, index) => (
                    <li key={index}>{value}</li>
                ))}
            </ul>
            <div>
                <b>평균값:</b> {avg}
            </div>
        </div>
    )
}

export default Average


--------------------------- useCallback ---------------------------
useMemo와 상당히 비슷한 함수
주로 렌더링 성능을 최적화해야 하는 상황에서 사용
만들어 놨던 함수를 재사용할 수 있다

함수를 선언하면 컴포넌트가 리렌더링될 때마다 새로 만들어진 함수를 사용하게 된다
대부분의 경우 이러한 방식은 문제가 없지만 렌더링이 자주 발생하거나 헨더링해야 할 컴포넌트의 개수가 많아지면 최적화가 필요하다

useCallback
첫 번째 파라미터 = 생성하고 싶은 함수
두 번째 파라미터 = 감시하고 싶은 값을 넣은 배열
함수 내부에서 상태값에 의존해야 할 때 반드시 두 번째 파라미터 안에 포함해야 한다
Average.js
import React, { useState, useMemo, useCallback } from 'react'

const getAverage = numbers => {
    console.log('평균값 계산 중..')

    if(numbers.length === 0) {
        return 0
    }

    const sum = numbers.reduce((a, b) => a + b)

    return sum / numbers.length
}

const Average = () => {
    const [list, setList] = useState([])
    const [number, setNumber] = useState('')

    //컴포넌트 처음 렌더링 시에만 함수 생성
    const onChange = useCallback(e => {
        setNumber(e.target.value)
    }, []) 

    //number 혹은 list 변화 시 함수 생성
    const onInsert = useCallback(e => {
        const nextList = list.concat(parseInt(number))

        setList(nextList)
        setNumber('')
    }, [number, list])

    const avg = useMemo(() => getAverage(list), [list])

    return (
        <div>
            <input value={number} onChange={onChange} />
            <button onClick={onInsert}>등록</button>
            <ul>
                {list.map((value, index) => (
                    <li key={index}>{value}</li>
                ))}
            </ul>
            <div>
                <b>평균값:</b> {avg}
            </div>
        </div>
    )
}

export default Average


--------------------------- useRef ---------------------------
useRef Hook은 함수 컴포넌트에서 ref를 쉽게 사용할 수 있도록 해 준다
Average.js
import React, { useState, useMemo, useCallback, useRef } from 'react'

const getAverage = numbers => {
    console.log('평균값 계산 중..')

    if(numbers.length === 0) {
        return 0
    }

    const sum = numbers.reduce((a, b) => a + b)

    return sum / numbers.length
}

const Average = () => {
    const [list, setList] = useState([])
    const [number, setNumber] = useState('')

    const inputEl = useRef(null);

    const onChange = useCallback(e => {
        setNumber(e.target.value)
    }, []) 

    const onInsert = useCallback(e => {
        const nextList = list.concat(parseInt(number))

        setList(nextList)
        setNumber('')

        inputEl.current.focus()
    }, [number, list])

    const avg = useMemo(() => getAverage(list), [list])

    return (
        <div>
            <input value={number} onChange={onChange} ref={inputEl}/>
            <button onClick={onInsert}>등록</button>
            <ul>
                {list.map((value, index) => (
                    <li key={index}>{value}</li>
                ))}
            </ul>
            <div>
                <b>평균값:</b> {avg}
            </div>
        </div>
    )
}

export default Average

로컬 변수 사용하기
컴포넌트 로컬 변수를 사용해야 할 때도 useRef활용 가능
로컬 변수란 렌더링과 상관없이 바뀔 수 있는 값을 의미

클래스 형태로 작성된 컴포넌트의 경우
MyComponent
import React, { Component } from 'react'

class MyComponent extends Component {
    id = 1

    setId = n => {
        this.id = n
    }

    printId = () => {
        console.log(this.is)
    }

    render() {
        return (
            <div>
                MyComponent
            </div>
        )
    }
}

export default MyComponent

함수 컴포넌트
RefSample.js
import React, { useRef } from 'react'

const RefSample = () => {
    const id = useRef(1)
    
    const setId = (n) => {
        id.current = n
    }

    const printId = () => {
        console.log(id.current)
    }

    return (
        <div>
            refsmaple
        </div>
    )
}

export default RefSample

이런경우 ref안의 값이 바뀌어도 리렌더링이 발생하지 않아 주의해야 한다


--------------------------- 커스텀 Hooks ---------------------------
여러 컴포넌트에서 비슷한 기능을 공유할 경우 hook을 직접 작성하여 로직 재사용 가능
useInputs.js
import { useReducer } from 'react'

function reducer(state, action){
    return {
        ...state,
        [action.name]: action.value
    }
}

export default functioin useInputs(initialForm){
    const [state, dispatch] = useReducer(reducer, initialForm)
    const onChange = e => {
        dispatch(e.target)
    }

    return [state, onChange]
}

Info.js
import { useInputs } from './useInputs'
const Info = () => {
    const [state, onChange] = useInputs({
        name: '',
        nickname: ''
    })
    const { name, nickname } = state

    return (
        <div>
            <div>
                <input name="name" value={name} onChnage={onChange} />
                <input name="nickname" value={nickname} onChnage={onChange} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    )
}