--------------------------- context API 사용법 익히기 ---------------------------
전역 상태관리 용도로 사용

yarn create react-app context-tutorial

contexts/color.js
import { createContext } from 'react'

//새 컨텐스트생성 createContext(기본값)
const ColorContext = createContext({ color: 'black' })

export default ColorContext

색상을 props로 받아 오는 것이 아니라 ColorContext 안에 있는 Consumer 라는 컴포넌트를 통해 색상을 조회
components/ColorBox.js
import ColorContext from '../contexts/color'

const ColorBox = () => {
    return (
        <ColorContext.Consumer>
            {value => (
                <div
                    style={{
                        width: '64px',
                        height: '64px',
                        background: value.color
                    }}
                />
            )}
        </ColorContext.Consumer>
    )
}

export default ColorBox

Consumer 사이에 중괄호를 열어서 그 안에 함수를 넣어 주었다
이러한 패턴을 Function as a child 혹은 Render Props라고 한다
컴포넌트의 children이 있어야 할 자리에 일반 JSX 혹은 문자열이 아닌 함수를 전달

App.js
import ColorBox from './components/ColorBox'

const App = () => {
    return (
        <div>  
            <ColorBox />
        </div>
    )
}

export default App

--------------------------- Provider ---------------------------
Context의 value 변경 시 사용

App.js
import ColorBox from './components/ColorBox'
import ColorContext from './contexts/color'

const App = () => {
    return (
        <ColorContext.Provider value={{ color: 'red' }}
            <div>
                <ColorBox />
            </div>
        </ColorContext.Provider>
    )
}

export default App

createContext 함수를 사용할 때 기본값은 Provider를 사용하지 않았을 때만 사용
만약 Provider를 사용했는데 value를 명시하지 않았다면 이 기본값을 사용하지 않기 떄문에 오류 발생

--------------------------- 동적 Context ---------------------------
Context의 value에는 함수도 전달 가능하다

contexts/color.js
import { createContext, useState } from 'react'

//컨텍스트 사용시 상태는 state로 업데이느 함수는 actions로 묶어서 전달하고 있다
//꼭 묶어서 전달할 필요는 없지만 분리 시 나중에 다른 컴포넌트에서 Context의 값을 사용할 때 편리하다
const ColorContext = createContext({
    state: { color: 'black', subcolor: 'red' },
    actions:{
        setColor: () => {},
        setSubcolor: () => {}
    }
})

const ColorProvider = ({ children }) => {
    const [color, setColor] = useState('black')
    const [subcolor, setSubcolor] = useState('red')

    //Context의 기본값 객체 수정
    //createContext의 기본값은 실제 Provider의 value에 넣는 객체의 형태와 일치시켜 주는 것이 좋다
    //그렇게 하면 Context 코드를 볼 때 내부 값이 어떻게 구성되어 있는지 파악하기도 쉽고
    //실수로 Provider를 사용하지 않았을 때 리액트 애플리케이션에서 에러가 발생하지 않는다
    const value = {
        state: { color, subcolor },
        actions: { setColor, setSubcolor }
    }

    return (
        <ColorContext.Provider value={value}>
            {children}
        </ColorContext.Provider>
    )
}

// const ColorConsumer = ColorContext.Consumer와 같은 의미
const { Consumer: ColorConsumer } = ColorContext

// ColorProvider와 ColorConsumer 내보내기
export { ColorProvider, ColorConsumer }

export default ColorContext

App.js
import ColorBox from './components/ColorBox'
import { ColorProvider } from './contexts/color'

const App = () => {
    return (
        <ColorProvider>
            <div>
                <ColorBox />
            </div>
        </ColorProvider>
    )
}

export default App

components/ColorBox.js
import { ColorConsumer } from '../contexts/color'

const ColorBox = () => {
    return (
        <ColorConsumer>
            {value => (
                <>
                    <div
                        style={{
                            width: '64px',
                            height: '64px',
                            background: value.state.color
                        }}
                    />
                    <div
                        style={{
                            width: '32px',
                            height: '32px',
                            background: value.state.subcolor
                        }}
                    />
                </>
            )}
        </ColorConsumer>
    )
}

export default ColorBox

객체 비구조화 할당 문법 사용
components/ColorBox.js
import { ColorConsumer } from '../contexts/color'

const ColorBox = () => {
    return (
        <ColorConsumer>
            {({ state }) => (
                <>
                    <div
                        style={{
                            width: '64px',
                            height: '64px',
                            background: state.color
                        }}
                    />
                    <div
                        style={{
                            width: '32px',
                            height: '32px',
                            background: state.subcolor
                        }}
                    />
                </>
            )}
        </ColorConsumer>
    )
}

export default ColorBox

--------------------------- Context의 actions에 넣어준 함수 사용 ---------------------------
components/SelectColors.js
const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']

const SelectColors = () => {
    return (
        <div>
            <h2>색상을 선택하세요.</h2>
            <div style={{ display: 'flex' }}>
                {colors.map(color => (
                    <div
                        key={color}
                        style={{
                            background: color,
                            width: '24px',
                            height: '24px',
                            cursor: 'pointer'
                        }}
                    />
                ))}
            </div>
            <hr />
        </div>
    )
}

export default SelectColors

App.js
import ColorBox from './components/ColorBox'
import { ColorProvider } from './contexts/color'
import SelectColors from './components/SelectColors'

const App = () => {
    return (
        <ColorProvider>
            <div>
                <SelectColors />
                <ColorBox />
            </div>
        </ColorProvider>
    )
}

export default App

components/SelectColors.js
//추가
import { ColorConsumer } from '../contexts/color'

const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']

const SelectColors = () => {
    return (
        <div>
            <h2>색상을 선택하세요.</h2>
            <ColorConsumer>
                {({ actions }) => (
                    <div style={{ display: 'flex' }}>
                        {colors.map(color => (
                            <div
                                key={color}
                                style={{
                                    background: color,
                                    width: '24px',
                                    height: '24px',
                                    cursor: 'pointer'
                                }}
                                onClick={() => actions.setColor(color)}
                                onContextMenu={e => {
                                    e.preventDefault()

                                    actions.setSubcolor(color)
                                }}
                            />
                        ))}
                    </div>
                )}
            </ColorConsumer>
            <hr />
        </div>
    )
}

export default SelectColors

--------------------------- Consumer 대신 Hook 사용 ---------------------------
useContext 라는 Hook을 사용하면 함수 컴포넌트에서 Context를 아주 편하게 사용 가능
components/ColorBox.js
//추가
import React, { useContext } from 'react'
import ColorContext from '../contexts/color

const ColorBox = () => {
    //추가
    const { state } = useContext(ColorContext)

    return (
        <>
            <div
                style={{
                    width: '64px',
                    height: '64px',
                    background: state.color
                }}
            />
            <div
                style={{
                    width: '32px',
                    height: '32px',
                    background: state.subcolor
                }}
            />  
        </>
    )
}

export default ColorBox

--------------------------- Consumer 대신 static contextType 사용 ---------------------------
클래스형 컴포넌트에서 Context를 좀 더 쉽게 사용하고 싶다면 static contextType을 정의

components/SelectColors.js
import React, { Component } from 'react'

const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']

class SelectColors extends Component {
    render() {
        return (
            <div>
                <h2>색상을 선택하세요.</h2>
                <div style={{ display: 'flex' }}
                    {colors.map(color => (
                        <div
                            key={color}
                            style={{
                                background: color,
                                width: '24px',
                                height: '24px',
                                cursor: 'pointer'
                            }}
                        />
                    ))}
                </div>
                <hr />
            </div>
        )
    }
}

export default SelectColors

components/SelectColors.js
import React, { Component } from 'react'
//추가
import ColorContext from '../contexts/color'

const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']

class SelectColors extends Component {
    //추가
    //이렇게 해 주면 this.context를 조회했을 때 현재 Context의 value를 가리키게 된다
    static contextType = ColorContext

    render() {
        return (
            <div>
                <h2>색상을 선택하세요.</h2>
                <div style={{ display: 'flex' }}
                    {colors.map(color => (
                        <div
                            key={color}
                            style={{
                                background: color,
                                width: '24px',
                                height: '24px',
                                cursor: 'pointer'
                            }}
                        />
                    ))}
                </div>
                <hr />
            </div>
        )
    }
}

export default SelectColors

components/SelectColors.js
import React, { Component } from 'react'
import ColorContext from '../contexts/color'

const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']

class SelectColors extends Component {
    static contextType = ColorContext

    handleSetColor = color => {
        this.context.actions.setColor(color)
    }

    handleSetSubColor = subcolor => {
        this.context.actions.setSubcolor(subcolor)
    }

    render() {
        return (
            <div>
                <h2>색상을 선택하세요.</h2>
                <div style={{ display: 'flex' }}
                    {colors.map(color => (
                        <div
                            key={color}
                            style={{
                                background: color,
                                width: '24px',
                                height: '24px',
                                cursor: 'pointer'
                            }}
                            onClick={() => this.handleSetColor(color)}
                            onContextMenu={e => {
                                e.preventDefault()
                                this.handleSetSubColor(color)
                            }}
                        />
                    ))}
                </div>
                <hr />
            </div>
        )
    }
}

export default SelectColors

static contextType을 정의하면 클래스 메서드에서도 Context에 넣어 둔 함수를 호출할 수 있다
하지만 클래스에서 하나의 Context밖에 사용하지 못한다