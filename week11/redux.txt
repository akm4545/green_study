--------------------------- 리덕스 ---------------------------
리덕스는 가장 많이 사용하는 리액트 상태 관리 라이브러리
상태 업데이트 관련 로직을 다른 파일로 분리시켜서 더욱 효율적으로 관리
또한 컴포넌트끼리 똑같은 상태를 공유해야 할 때도 여러 컴포넌트를 거치지 않고 손쉽게 상태 값을 전달하거나 업데이트

Context API를 통해서도 똑같은 작업을 할 수 있다
16.3 버전이 릴리즈 되면서 Context API가 개선되기 전에는 사용 방식이 매우 불편했기 때문에 주로 리덕스로 
전역 상태 관리를 해 왔다

단순히 전역 상태 관리만 한다면 Context API를 사용하는 것만으로도 충분하다
리덕스를 사용하면 상태를 더욱 체계적으로 관리할 수 있기 때문에 프로젝트의 규모가 클 경우에는 리덕스를 사용하는 편이 좋다
코드의 유지 보수성도 높여 주고 작업 효율도 극대화해 주기 떄문이다
개발자 도구도 지원하며 미들웨어라는 기능을 제공하여 비동기 작업을 훨씬 효율적으로 관리할 수 있게 해 주기도 한다


--------------------------- 개념 정리 ---------------------------
1. 액션
상태에 어떠한 변화가 필요하면 액션이 발생
하나의 객체로 표현
{
    type: 'TOGGLE_VALUE'
}

액션 객체는 type 필드를 반드시 가지고 있어야 한다
이 값이 액션의 이름이다 
그리고 그 외의 값들은 나중에 상태 업데이트를 할 때 참고해야 할 값이며 마음대로 넣을 수 있다

액션 예시
{
    type: 'ADD_TODO',
    data: {
        id: 1,
        text: '리덕스 배우기'
    }
}

{
    type: 'CHANGE_INPUT',
    text: '안녕하세요'
}

2. 액션 생성 함수
액션 객체를 만들어 주는 함수
function addTodo(data){
    return {
        type: 'ADD_TODO',
        data
    }
}

화살표 함수
const changeInput = text => ({
    type: 'CHANGE_INPUT',
    text
})

변화를 일이켜야 할 때마다 액션 객체를 만들어야 하는데 번거롭고 만드는 과정에서 실수로 정보를 놓칠 수도 있어서
함수로 만들어서 관리

3. 리듀서
변화를 일으키는 함수
액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달받은 액션 객체를 파라미터로 받아온다
그리고 두 값을 참고하여 새로운 상태를 만들어서 반환

const initialState = {
    counter: 1
}

function reducer(state = initialState, action) {
    switch(action.type){
        case INCREMENT:
            return {
                counter: state.counter + 1
            }
        default:
            return state;
    }
}

4. 스토어
프로젝트에 리덕스를 적용하기 위해 스토어를 만든다
한 개의 프로젝트는 단 하나의 스토어만 가질 수 있다
스토어 안에는 현재 애플리케이션 상태와 리듀서가 들어 있으며 그 외에도 몇 가지 중요한 내장 함수를 지닌다

5. 디스패치
스토어의 내장 함수 중 하나 
디스패치는 액션을 발생시킨다 
dispatch(action)과 같은 형태로 액션 객체를 파라미터로 넣어서 호출
이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만든다

6.구독
스토어의 내장 함수 중 하나
subscribe 함수 안에 리스너 함수를 파리미터로 넣어서 호출해 주면 
이 리스너 함수가 액션이 디스패치되어 상태가 업데이트될 때마다 호출된다

const listener = () => {
    console.log('상태가 업데이트됨')
}
const unsubscribe = store.subscribe(listener)

//구독 비활성화 함수
unsubscribe() 


--------------------------- 리액트 없이 리덕스 사용 ---------------------------
리덕스는 리액트에 종속되는 라이브러리가 아니다
실제로 다른 UI라이브러리/프레임워크와 함께 사용할 수 있다 
리덕스는 바닐라 자바스크립트(순수 자바스크립트)와 함께 사용할 수도 있다

Parcel 설치 (쉽고 빠르게 웹 애플리케이션 프로젝트 구성 가능)
npm install -g parcel-bundler

vanilla-redux 폴더 생성
해당 폴더에서 yarn init -y

vanilla-redux/index.html
<html>
    <body>
        <div>바닐라 자바스크립트</div>
        <script src="./index.js"></script>
    </body>
</html>

vanilla-redux/index.js
console.log('hello parcel')

프로젝트 실행
parcel index.html

리덕스 설치
npm install redux

UI구성
vanilla-redux/index.css
.toggle {
    border: 2px solid black;
    width: 64px;
    height: 64px;
    border-radius: 32px;
    box-sizing: border-box;
}

.toggle.active{
    background: yellow;
}

vanilla-redux/index.html
<html>
    <head>
        <link rel="stylesheet" type="text/css" href="index.css" />
    </head>
    <body>
        <div class="toggle"></div>
        <hr />
        <h1>0</h1>
        <button id="increase">+1</button>
        <button id="decrease">-1</button>
        <script src="./index.js"></script>
    </body>
</html>

DOM 레퍼런스 만들기
vanilla-redux/index.js
const divToggle = document.querySelector('.toggle')
const counter = document.querySelector('h1')
const btnIncrease = document.querySelector('#increase')
const divDecrease = document.querySelector('#decrease')

액션 타입과 액션 생성 함수
액션 이름은 문자열 형태로 주로 대문자로 작성
액션의 이름은 고유해야 한다 
vanilla-redux/index.js
const divToggle = document.querySelector('.toggle')
const counter = document.querySelector('h1')
const btnIncrease = document.querySelector('#increase')
const divDecrease = document.querySelector('#decrease')

const TOGGLE_SWITCH = 'TOGGLE_SWITCH'
const INCREASE = 'INCREASE'
const DECREASE = 'DECREASE'

액션 생성 함수 작성
액션 객체는 type 값을 반드시 갖고 있어야 한다
vanilla-redux/index.js
const divToggle = document.querySelector('.toggle')
const counter = document.querySelector('h1')
const btnIncrease = document.querySelector('#increase')
const divDecrease = document.querySelector('#decrease')

const TOGGLE_SWITCH = 'TOGGLE_SWITCH'
const INCREASE = 'INCREASE'
const DECREASE = 'DECREASE'

const toggleSwitch = () => ({ type: TOGGLE_SWITCH })
const increase = difference => ({ type: INCREASE, difference })
const decrease = () => ({ type: DECREASE })

초깃값 설정
초깃값의 형태는 자유다
vanilla-redux/index.js
const divToggle = document.querySelector('.toggle')
const counter = document.querySelector('h1')
const btnIncrease = document.querySelector('#increase')
const divDecrease = document.querySelector('#decrease')

const TOGGLE_SWITCH = 'TOGGLE_SWITCH'
const INCREASE = 'INCREASE'
const DECREASE = 'DECREASE'

const toggleSwitch = () => ({ type: TOGGLE_SWITCH })
const increase = difference => ({ type: INCREASE, difference })
const decrease = () => ({ type: DECREASE })

const initialState = {
    toggle: false,
    counter: 0
}

리듀서 함수 정의
리듀서 함수는 변화를 일으키는 함수
vanilla-redux/index.js
const divToggle = document.querySelector('.toggle')
const counter = document.querySelector('h1')
const btnIncrease = document.querySelector('#increase')
const divDecrease = document.querySelector('#decrease')

const TOGGLE_SWITCH = 'TOGGLE_SWITCH'
const INCREASE = 'INCREASE'
const DECREASE = 'DECREASE'

const toggleSwitch = () => ({ type: TOGGLE_SWITCH })
const increase = difference => ({ type: INCREASE, difference })
const decrease = () => ({ type: DECREASE })

const initialState = {
    toggle: false,
    counter: 0
}

//파라미터 기본값 설정 state = initialState
function reducer(state = initialState, action){
    switch(action.type){
        case TOGGLE_SWITCH:
            return {
                ...state,
                toggle: !state.toggle
            }
        case INCREASE:
            return {
                ...state,
                counter: state.counter + action.difference
            }
        case DECREASE:
            return {
                ...state,
                counter: state.counter - 1
            }
        default:
            return state
    }
}

리듀서는 상태의 불변성을 유지하면서 데이터에 변화를 일으켜 주어야 한다


스토어 만들기
createStore 함수를 사용해 스토어를 만든다
함수의 파라미터에는 리듀서 함수를 넣어 주어야 한다
vanilla-redux/index.js
import { createStore } from 'redux'

const divToggle = document.querySelector('.toggle')
const counter = document.querySelector('h1')
const btnIncrease = document.querySelector('#increase')
const divDecrease = document.querySelector('#decrease')

const TOGGLE_SWITCH = 'TOGGLE_SWITCH'
const INCREASE = 'INCREASE'
const DECREASE = 'DECREASE'

const toggleSwitch = () => ({ type: TOGGLE_SWITCH })
const increase = difference => ({ type: INCREASE, difference })
const decrease = () => ({ type: DECREASE })

const initialState = {
    toggle: false,
    counter: 0
}

function reducer(state = initialState, action){
    switch(action.type){
        case TOGGLE_SWITCH:
            return {
                ...state,
                toggle: !state.toggle
            }
        case INCREASE:
            return {
                ...state,
                counter: state.counter + action.difference
            }
        case DECREASE:
            return {
                ...state,
                counter: state.counter - 1
            }
        default:
            return state
    }
}

const store = createStore(reducer)


render 함수 만들기
이 함수는 상태가 업데이트될 때마다 호출되며 html을 사용하여 만들어진 UI의 속성을 상태에 따라 변경
vanilla-redux/index.js
import { createStore } from 'redux'

const divToggle = document.querySelector('.toggle')
const counter = document.querySelector('h1')
const btnIncrease = document.querySelector('#increase')
const divDecrease = document.querySelector('#decrease')

const TOGGLE_SWITCH = 'TOGGLE_SWITCH'
const INCREASE = 'INCREASE'
const DECREASE = 'DECREASE'

const toggleSwitch = () => ({ type: TOGGLE_SWITCH })
const increase = difference => ({ type: INCREASE, difference })
const decrease = () => ({ type: DECREASE })

const initialState = {
    toggle: false,
    counter: 0
}

function reducer(state = initialState, action){
    switch(action.type){
        case TOGGLE_SWITCH:
            return {
                ...state,
                toggle: !state.toggle
            }
        case INCREASE:
            return {
                ...state,
                counter: state.counter + action.difference
            }
        case DECREASE:
            return {
                ...state,
                counter: state.counter - 1
            }
        default:
            return state
    }
}

const store = createStore(reducer)

const render = () => {
    //현재 상태를 불러온다
    const state = store.getState()

    //토글 처리
    if(state.toggle){
        divToggle.classList.add('active')
    } else {
        divToggle.classList.remove('active')
    }

    //카운터 처리
    counter.innerText = state.counter
}

render()


구독하기
스토어의 상태가 바뀔 때마다 render 함수 호출되도록 작성
스토어 내장 함수 subscribe를 사용하여 수행
추후 리액트 프로젝트에서 리덕스를 사용할 때는 이 함수를 직접 사용하지 않는다
컴포넌트에서 리덕스 상태를 조회하는 과정에서 react-redux라는 라이브러리가 이 작업을 대신한다
vanilla-redux/index.js
import { createStore } from 'redux'

const divToggle = document.querySelector('.toggle')
const counter = document.querySelector('h1')
const btnIncrease = document.querySelector('#increase')
const divDecrease = document.querySelector('#decrease')

const TOGGLE_SWITCH = 'TOGGLE_SWITCH'
const INCREASE = 'INCREASE'
const DECREASE = 'DECREASE'

const toggleSwitch = () => ({ type: TOGGLE_SWITCH })
const increase = difference => ({ type: INCREASE, difference })
const decrease = () => ({ type: DECREASE })

const initialState = {
    toggle: false,
    counter: 0
}

function reducer(state = initialState, action){
    switch(action.type){
        case TOGGLE_SWITCH:
            return {
                ...state,
                toggle: !state.toggle
            }
        case INCREASE:
            return {
                ...state,
                counter: state.counter + action.difference
            }
        case DECREASE:
            return {
                ...state,
                counter: state.counter - 1
            }
        default:
            return state
    }
}

const store = createStore(reducer)

const render = () => {
    //현재 상태를 불러온다
    const state = store.getState()

    //토글 처리
    if(state.toggle){
        divToggle.classList.add('active')
    } else {
        divToggle.classList.remove('active')
    }

    //카운터 처리
    counter.innerText = state.counter
}

render()
store.subscribe(render)

액션 발생시키기
액션 발생을 디스패치라고 하고 스토어 내장 함수 dispatch를 사용한다
파라미터는 액션 객체를 넣어 준다
vanilla-redux/index.js
import { createStore } from 'redux'

const divToggle = document.querySelector('.toggle')
const counter = document.querySelector('h1')
const btnIncrease = document.querySelector('#increase')
const divDecrease = document.querySelector('#decrease')

const TOGGLE_SWITCH = 'TOGGLE_SWITCH'
const INCREASE = 'INCREASE'
const DECREASE = 'DECREASE'

const toggleSwitch = () => ({ type: TOGGLE_SWITCH })
const increase = difference => ({ type: INCREASE, difference })
const decrease = () => ({ type: DECREASE })

const initialState = {
    toggle: false,
    counter: 0
}

function reducer(state = initialState, action){
    switch(action.type){
        case TOGGLE_SWITCH:
            return {
                ...state,
                toggle: !state.toggle
            }
        case INCREASE:
            return {
                ...state,
                counter: state.counter + action.difference
            }
        case DECREASE:
            return {
                ...state,
                counter: state.counter - 1
            }
        default:
            return state
    }
}

const store = createStore(reducer)

const render = () => {
    //현재 상태를 불러온다
    const state = store.getState()

    //토글 처리
    if(state.toggle){
        divToggle.classList.add('active')
    } else {
        divToggle.classList.remove('active')
    }

    //카운터 처리
    counter.innerText = state.counter
}

render()
store.subscribe(render)

divToggle.onclick = () => {
    store.dispatch(toggleSwitch())
}

btnIncrease.onclick = () => {
    stroe.dispatch(increase(1))
}

btnDecrease.onclick = () => {
    store.dispatch(decrease())
}

--------------------------- 리덕스의 세 가지 규칙 ---------------------------
1. 단일 스토어
여러 개의 스토어를 사용할 수도 있지만 상태 관리가 복잡해질 수 있으므로 권장하지 않음

2. 읽기 전용 상태
리덕스 상태는 읽기 전용이다
상태를 업데이트 할 때는 기존의 객체는 거드리지 않고 새로운 객체를 생성해 주어야 한다
불변성을 유지해야 하는 이유는 내부적으로 데이터가 변경되는 것을 감지하기 위해 얕은 비교 검사를 하기 떄문이다

3. 리듀서는 순수한 함수
순수한 함수는 다음 조건을 만족한다
- 리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받는다
- 파라미터 외의 값에는 의존하면 안 된다
- 이전 상태는 절대로 건드리지 않고 변화를 준 새로운 상태 객체를 만들어서 반환한다
- 똑같은 파리미터로 호출도니 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 한다

리듀서 함수 내부에서 랜덤 값을 만들거나 Date 함수를 사용하여 현재 시간을 가져오거나 
네트워크 요청을 한다면 파라미터가 같아도 다른 결과를 만들어 낼 수 있기 떄문에 사용하면 안 된다