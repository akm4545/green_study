--------------------------- 라이프 사이클 ---------------------------
Will 접두사가 붙은 메서드는 어떤 작업을 작동하기 전에 실행되는 메서드
Did 접두사가 붙은 메서드는 어떤 작업을 작동한 후에 실행되는 메서드

라이프 사이클은 총 세 가지
마운트, 업데이트, 언마운트 카테고리로 나뉘어져 있다

마운트
DOM이 생성되고 웹 브라우저상에 나타나는 것을 마운트라고 한다 

마운트 시 호출하는 메서드
constructor: 컴포넌트를 새로 만들 때마다 호출되는 클래스 생성자 메서드
getDerivedStateFromProps: props에 있는 값을 state에 넣을 때 사용하는 메서드
render: 준비한 UI를 렌더링하는 메서드
componentDidMount: 컴포넌트가 웹 브라우저상에 나타난 후 호출하는 메서드

업데이트
컴포넌트는 다음과 같은 경우에 업데이트가 일어난다
props가 바뀔 때
state가 바뀔 때
부모 컴포넌트가 리렌더링될 때
this.forceUpdate로 갈제로 렌더링을 트리거할 때

업데이트 시 호출하는 메서드
getDerivedStateFromProps: 업데이트가 시작하기 전에도 호출 props의 변화에 따라 state값에도 변화를 주고 싶을 때 사용
shouldComponentUpdate: 컴포넌트가 리렌더링을 해야 할지 말지를 결정하는 메서드
이 메서드는 boolean 값을 반환해야 하며 true면 다음 라이프사이클 메서드를 계속 실행하고 false면 작업 중지(리렌더링 x)
만약 특정 함수에서 this.forceUpdate() 함수를 호출한다면 이 과정을 생략하고 바로 render 함수 호출
render: 컴포넌트를 리렌더링
getSnapshotBeforeUpdate: 컴포넌트 변화를 DOM에 반영하기 바로 직전에 호출하는 메서드
componentDidUpdate: 컴포넌트의 업데이트 작업이 끝난 후 호출하는 메서드

언마운트
컴포넌트를 DOM에서 제거하는 것

언마운트시 호출하는 메서드
componentWillUnmount: 컴포넌트가 웹 브라우저상에서 사라지기 전에 호출하는 메서드


--------------------------- 라이프 사이클 메서드 ---------------------------
render()
컴포넌트의 모양새를 정의
라이프사이클 메서드 중 유일한 필수 메서드
이 메서드 안에서 this.props와 this.state에 접근 가능하며 리액트 요소를 반환
이 메서드 안에서는 이벤트 설정이 아닌 곳에서 setState를 사용하면 안 되며 브라우저의 DOM에 접근해서도 안된다
DOM의 정보를 가져오거나 state에 변화를 줄 때는 componentDidMount에서 처리해야 한다

constructor()
constructor(props) {...}
컴포넌트 생성자로 초기 state 정의 가능

getDerivedStateFromProps()
props로 받아 온 값을 state에 동기화시키는 용도 
컴포넌트가 마운트될 때와 업데이트될 때 호출

static getDerivedStateFromProps(nextProps, prevState) {
    if(nextProps.value !== prevState.value){ // 조건에 따라 특정 값 동기화
        return { value: nextProps.value }
    }

    return null //state를 변경할 필요가 없다면 null을 반환
}

componentDidMount()
componentDidMount() {...}
컴포넌트를 만들고 첫 렌더링을 다 마친 후 실행 
안에서 다른 자바스크립트 라이브러리 또는 프레임워크 함수를 호출하거나
이벤트 등록, setTimeout, setInterval, 네트워크 요청 같은 비동기 작업을 처리할때 사용

shouldComponentUpdate()
shouldComponentUpdate(nextProps, nextState){ ... }
props 또는 state 변경 시 리렌더링 여부를 지정하는 메서드
boolean 값을 리턴하며 컴포넌트를 만들 때 이 메서드를 따로 생성하지 않으면 기본적으로 언제나 true 값 반환
false를 반환하면 업데읕 과정은 여기서 중지
이 메서드 안에서 현재 props와 state는 this.props와 this.state로 접근하고 새로 설정될 props 또는 state는
nextProps와 nextState로 접근할 수 있다
프로젝트 성능을 최적화할 때 성능에 맞는 알고리즘을 작성하여 리렌더링을 방지할 떄는 false 값을 반환

getSnapshotBeforeUpdate()
render에서 만들어진 결과물이 브라우저에 실제로 반영되기 직전에 호출 
이 메서드에서 반환하는 값은 세 번째 파라미터인 snapShot 값으로 전달받을 수 있는데 주로 업데이트하기 직전의 값을 
참고할 일이 있을 때 활용된다(예: 스크롤바 위치 유지)
getSnapshotBeforeUpdate(prevProps, prevState) {
    if(prevState.array !== this.state.array){
        const { scrollTop, scrollHeight } = this.lit
        return { scrollTop, scrollHeight }
    }
}

componentDidUpdate()
componentDidUpdate(prevProps, prevState, snapShot) { ... }
리렌더링 완료 후 실행 
업데이트가 끝난 직후이므로 DOM 관련 처리를 해도 무방 
prevProps 또는 prevState를 사용하여 컴포넌트가 이전에 가졌던 데이터에 접근할 수 있다
getSnapshotBeforeUpdate에서 반환한 값이 있다면 여기서 snapshot 값을 전달받을 수 있다

componentWillUnmount()
componentWillUnmount() { ... }
컴포넌트를 DOM에서 제거할 때 실행 
여기서 등록한 이벤트, 타이머, 직접 생성한 DOM이 있다면 여기서 제거 작업을 해야 한다

componentDidCatch()
컴포넌트 렌더링 도중에 에러가 발생했을 때 애플리케이션이 먹통이 되지 않고 오류 UI를 보여 줄 수 있게 해준다
componentDidCatch(error, info) {
    this.setState({
        error: true
    })

    console.log({ error, info })
}
error 파라미터에 어떤 에러가 발생했는지 알려 주며 info 파라미터는 어디에 있는 코드에서 오류가 발생했는지에 대한 정보를 준다
따로 서버 API를 호출하여 에러를 수집할 수도 있다
그러나 이 메서드를 사용할 때는 컴포넌트 자신에게 발생하는 에러를 잡아낼 수 없고
자신의 this.props.children으로 전달되는 에러만 잡아낼 수 있다

--------------------------- 라이프 사이클 실습 ---------------------------
LifeCycleSample.js
import React, { Component } from 'react'

class LifeCycleSample extends Component {
    state = {
        number: 0,
        color: null
    }

    //ref 설정 부분
    myRef = null;

    constructor(props){
        super(props)
        console.log('constructor')
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        console.log('getDerivedStateFromProps')

        if(nextProps.color !== prevState.color) {
            return { color: nextProps.color }
        }

        return null
    }

    componentDidMount() {
        console.log('componentDidMount)
    }

    shouldComponentUpdate(nextProps, nextState){
        console.log('shouldComponentUpdate', nextProps, nextState)
        //숫자의 마지막 자리가 4이면 리렌더링을 하지 않는다
        return nextState.number % 10 !== 4
    }

    componentWillUnmount() {
        console.log('componentWillUnmount)
    }

    handleClick = () => {
        this.setState({
            number: this.state.number + 1
        })
    }

    getSnapshotBeforeUpdate(prevProps, prevState){
        console.log('getSnapshotBeforeUpdate')

        if(prevProps.color !== this.props.color){
            return this.myRef.style.color;
        }

        return null
    }

    componentDidUpdate(prevProps, prevState, snapShot){
        console.log('componentDidUpdate', prevProps, prevState)

        if(snapShot){
            console.log('업데이트되기 직전 색상: ', snapShot)
        }
    }

    render() {
        console.log('render')

        const style = {
            color: this.props.color
        }

        return (
            <div>
                <h1 
                    style={style} 
                    ref={ref => this.myRef=ref}
                >
                    {this.state.number}
                </h1>
                <p>color: {this.state.color}</p>
                <button onClick={this.handleClick}>
                    더하기
                </button>
            </div>
        )
    }
}

export default LifeCycleSample

App.js
import React, { Component } from 'react'
import LifeCycleSample from './LifeCycleSample'

// 랜덤 색상을 생성
function getRandomColor() {
    return '#' + Math.floor(Math.random() * 16777215).toString(16)
}

class App extends Component {
    state = {
        color: '#000000'
    }

    handleClick = () => {
        this.setState({
            color: getRandomColor()
        })
    }

    render() {
        return (
            <div>
                <button onClick={this.handleClick}>랜덤 색상</button>
                <LifeCycleSample color={this.state.color} />
            </div>
        )
    }
}

export default App

React.StrictMode가 적용되어 있으면 console이 2개씩 찍힐 수 있다


--------------------------- 에러 잡아내기 실습 ---------------------------
LifeCycleSample.js
import React, { Component } from 'react'

class LifeCycleSample extends Component {
    state = {
        number: 0,
        color: null
    }

    myRef = null;

    constructor(props){
        super(props)
        console.log('constructor')
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        console.log('getDerivedStateFromProps')

        if(nextProps.color !== prevState.color) {
            return { color: nextProps.color }
        }

        return null
    }

    componentDidMount() {
        console.log('componentDidMount)
    }

    shouldComponentUpdate(nextProps, nextState){
        console.log('shouldComponentUpdate', nextProps, nextState)
        return nextState.number % 10 !== 4
    }

    componentWillUnmount() {
        console.log('componentWillUnmount)
    }

    handleClick = () => {
        this.setState({
            number: this.state.number + 1
        })
    }

    getSnapshotBeforeUpdate(prevProps, prevState){
        console.log('getSnapshotBeforeUpdate')

        if(prevProps.color !== this.props.color){
            return this.myRef.style.color;
        }

        return null
    }

    componentDidUpdate(prevProps, prevState, snapShot){
        console.log('componentDidUpdate', prevProps, prevState)

        if(snapShot){
            console.log('업데이트되기 직전 색상: ', snapShot)
        }
    }

    render() {
        console.log('render')

        const style = {
            color: this.props.color
        }

        return (
            <div>
                {this.props.missing.value}
                <h1 
                    style={style} 
                    ref={ref => this.myRef=ref}
                >
                    {this.state.number}
                </h1>
                <p>color: {this.state.color}</p>
                <button onClick={this.handleClick}>
                    더하기
                </button>
            </div>
        )
    }
}

export default LifeCycleSample

ErrorBoundary.js
import React, { Component } from 'react'

class ErrorBoundary extends Component {
    state = {
        error: false
    }

    componentDidCatch(error, info){
        this.setState({
            error: true
        })

        console.log({ error, info})
    }

    render() {
        if(this.state.error) {
            return <div>에러가 발생했습니다.</div>
        }
    }
}

export default ErrorBoundary

App.js
import React, { Component } from 'react'
import LifeCycleSample from './LifeCycleSample'
import ErrorBoundary from './ErrorBoundary'

function getRandomColor() {
    return '#' + Math.floor(Math.random() * 16777215).toString(16)
}

class App extends Component {
    state = {
        color: '#000000'
    }

    handleClick = () => {
        this.setState({
            color: getRandomColor()
        })
    }

    render() {
        return (
            <button onClick={this.handleClick}>랜덤 색상</button>
            <ErrorBoundary>
                <LifeCycleSample color={this.state.color} />
            </ErrorBoundary>
        )
    }
}

export default App
