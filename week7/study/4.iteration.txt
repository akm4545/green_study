--------------------------- 컴포넌트 반복 ---------------------------
//IterationSample.js
import React from 'react'

const IterationSample = () => {
    return (
        <ul>
            <li>눈사람</li>
            <li>얼음</li>
            <li>눈</li>
            <li>바람</li>
        </ul>
    )
}

export default IterationSample

--------------------------- map을 사용해서 반복 ---------------------------
//IterationSample.js
import React from 'react'

const IterationSample = () => {
    const names = ['눈사람', '얼음', '눈', '바람]
    const nameList = names.map(name => <li>{name}</li>)

    return <ul>{nameList}</ul>
}

export default IterationSample

//App.js
import React, { Component } from 'react'
import IterationSample from './IterationSample'

class App extends Component {
    render() {
        return (
            <IterationSample />
        )
    }
}

export default App;


--------------------------- key ---------------------------
리액트에서 컴포넌트 배열 렌더링 시 가상 DOM에서 변경사항을 빠르게 감지하기 위해 사용
key 값이 없다면 가상 DOM 스캔 시 리스트를 순차적으로 비교하며 감지
key가 있다면 이 값을 사용하여 변화 감지

//IterationSample.js
import React from 'react'

const IterationSample = () => {
    const names = ['눈사람', '얼음', '눈', '바람]
    //map의 콜백함수 인수인 index를 사용하여 key값 생성
    const nameList = names.map((name, index) => <li key={index}>{name}</li>)

    return <ul>{nameList}</ul>
}

export default IterationSample

key 값으로 index를 사용하면 배열 변경 시 효율적으로 리렌더링하지 못한다
index는 순차적으로 늘어나서 고윳값을 지니지만 데이터에 대해서 고윳값을 유지하지는 못한다
index 1 2 3 => 1 2 3
      a b c    a b d => c 제거 후 d 추가

--------------------------- 응용 ---------------------------
//IterationSample.js
import React, { useState } from 'react'

const IterationSample = () => {
    const [names, setNames] = useState([
        { id: 1, text: '눈사람' },
        { id: 2, text: '얼음' },
        { id: 3, text: '눈' },
        { id: 4, text: '바람' },
    ])
    const [inputText, setInputText] = useState('')
    const [nextId, setNextId] = useState(5)

    //key 값으로 map의 index 대신 state의 id 값 사용
    const nameList = names.map(name => <li key={name.id}>{name.text}</li>)
    return <ul>{nameList}</ul>
}

export default IterationSample


//IterationSample.js
import React, { useState } from 'react'

const IterationSample = () => {
    const [names, setNames] = useState([
        { id: 1, text: '눈사람' },
        { id: 2, text: '얼음' },
        { id: 3, text: '눈' },
        { id: 4, text: '바람' },
    ])
    const [inputText, setInputText] = useState('')
    const [nextId, setNextId] = useState(5)

    const onChange = e => setInputText(e.target.value)
    const onClick = () => {
        const nextNames = names.concat({
            id: nextId,
            text: inputText
        })

        setNextId(nextId + 1)
        setNames(nextNames)
        setInputText('')
    }

    const nameList = names.map(name => <li key={name.id}>{name.text}</li>)

    return (
        <>
            <input value={inputText} onChange={onChange} />
            <button onClick={onClick}>추가</button>
            <ul>{nameList}</ul>
        </>
    )
}

export default IterationSample

배열에 항목 추가시 배열의 push 함수를 사용하지 않고 concat을 사용
push는 기존의 배열 자체를 변경하지만 concat은 새로운 배열을 만들어 준다
리액트에서 상태 업데이트 시 기존 상태를 그대로 두면서 새로운 값을 상태로 설정해야 한다
이를 불변성 유지라고 하는데 불변성 유지를 해 주어야 나중에 리액트 컴포넌트의 성능을 최적화할 수 있다


--------------------------- 응용(데이터 제거) ---------------------------
불변성 유지를 하기 위해 filter를 사용하여 제거

//IterationSample.js
import React, { useState } from 'react'

const IterationSample = () => {
    const [names, setNames] = useState([
        { id: 1, text: '눈사람' },
        { id: 2, text: '얼음' },
        { id: 3, text: '눈' },
        { id: 4, text: '바람' },
    ])
    const [inputText, setInputText] = useState('')
    const [nextId, setNextId] = useState(5)

    const onChange = e => setInputText(e.target.value)
    const onClick = () => {
        const nextNames = names.concat({
            id: nextId,
            text: inputText
        })

        setNextId(nextId + 1)
        setNames(nextNames)
        setInputText('')
    }
    const onRemove = id => {
        const nextNmaes = names.filter(name => name.id !== id)
        setNames(nextNames);
    }

    const nameList = names.map(name => (
        <li 
            key={name.id}
            onDoubleClick={() => onRemove(name.id)}
        >
            {name.text}
        </li>
    ))

    return (
        <>
            <input value={inputText} onChange={onChange} />
            <button onClick={onClick}>추가</button>
            <ul>{nameList}</ul>
        </>
    )
}

export default IterationSample
