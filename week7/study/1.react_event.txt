--------------------------- 리액트 이벤트 시스템 ---------------------------

리액트의 이벤트 시스템은 웹 브라우저의 HTML 이벤트와 인터페이스가 동일하기 때문에 사용법이 비슷

--------------------------- 이벤트 사용시 주의사항 ---------------------------
1. 이벤트 이름은 카멜 케이스로 작성
HTML = onclick
REACT = onClick

2. 이벤트에 실행할 자바스크립트 코드를 전달하는 것이 아니라 함수 형태의 값을 전달
함수 형태의 객체를 전달 
에로우 펑션으로 함수를 바로 만들어 전달해도 되고 렌더링 부분 외부에 미리 만들어서 전달 가능

3. DOM 요소에만 이벤트를 설정 가능
div, input form 같은 DOM 요소에만 이벤트 등록이 가능하고 직접 만든 컴포넌트에 등록은 불가

ex) MyComponent에 onClick 값을 설정하면 MyComponent 클릭 시 onClick 이벤트를 실행하는게 아닌 props로 onClick 값 전달

--------------------------- 이벤트 핸들링 실습 ---------------------------
EventPractice.js
import React, { Component } from 'react';

class EventPractice extends Component{
    render() {
        return (
            <div>
                <h1>이벤트 연습</h1>
            </div>
        )
    }
}

export default EventPractice;

App.js
import EventPractice from './EventPractice';

const App = () => {
    return <EventPractice />;
}

export default App;

--------------------------- onChange ---------------------------
EventPractice.js
import React, { Component } from 'react';

class EventPractice extends Component{
    render() {
        return (
            <div>
                <h1>이벤트 연습</h1>
                <input 
                    type="text"
                    name="message"
                    placeholder="아무거나 입력해 보세요"
                    onChange={
                        (e) => { //e 객체는 SyntheticEvent 객체로 네이티브 이벤트를 감싼 래퍼 객체
                            // 네이티브 이벤트와 달리 이벤트가 끝나고 나면 초기화되어 정보 참조 불가능
                            // 동기적으로 이벤트 객체를 참조할 일이 있다면 e.persist() 함수 호출
                            console.log(e)
                            console.log(e.target.value)
                        }
                    }
                />
            </div>
        )
    }
}

export default EventPractice;


--------------------------- state에 input 값 담기 ---------------------------
EventPractice.js
import React, { Component } from 'react';

class EventPractice extends Component{

    state = {
        message: ''
    }

    render() {
        return (
            <div>
                <h1>이벤트 연습</h1>
                <input 
                    type="text"
                    name="message"
                    placeholder="아무거나 입력해 보세요"
                    value={this.state.message}
                    onChange={
                        (e) => {
                            this.setState({
                                message: e.target.value
                            })
                        }
                    }
                />
            </div>
        )
    }
}

export default EventPractice;

--------------------------- 버튼 클릭 시 comment 값 공백 설정 ---------------------------
EventPractice.js
import React, { Component } from 'react';

class EventPractice extends Component{

    state = {
        message: ''
    }

    render() {
        return (
            <div>
                <h1>이벤트 연습</h1>
                <input 
                    type="text"
                    name="message"
                    placeholder="아무거나 입력해 보세요"
                    value={this.state.message}
                    onChange={
                        (e) => {
                            this.setState({
                                message: e.target.value
                            })
                        }
                    }
                />
                <button onClick={
                    () => {
                        alert(this.state.message)
                        this.setState({
                            message: ''
                        })
                    }
                }>확인</button>
            </div>
        )
    }
}

export default EventPractice;

--------------------------- 임의 메서드 작성 ---------------------------
함수를 미리 만들어서 전달하는 방식은 성능상 차이가 거의 없지만 가독성이 훨씬 높다

EventPractice.js
import React, { Component } from 'react';

class EventPractice extends Component{

    state = {
        message: ''
    }

    constructor(props){
        super(props)
        //함수 호출 시 this는 호출부에 따라 결정
        //클래스의 임의 메서드가 특정 HTML 요소의 이벤트로 등록되는 과정에서 메서드와 this의 관계가 끊어진다
        //this를 바인딩하는 작업이 필요한데 bind 함수를 사용하여 바인딩 
        //바인딩 하지 않는다면 this는 undefined를 가리키게 된다
        this.handleChange = this.handleChange.bind(this)
        this.handleClick = this.handleClick.bind(this)
    }

    handleChange(e){
        this.setState({
            message: e.target.value
        })
    }

    handleClick() {
        alert(this.state.message);
        this.setState({
            message: ''
        })
    }

    render() {
        return (
            <div>
                <h1>이벤트 연습</h1>
                <input 
                    type="text"
                    name="message"
                    placeholder="아무거나 입력해 보세요"
                    value={this.state.message}
                    onChange={this.handleChange}
                />
                <button onClick={this.handleClick}>확인</button>
            </div>
        )
    }
}

export default EventPractice;

--------------------------- Property Initializer Syntax 사용 ---------------------------
간결하게 이벤트 설정

EventPractice.js
import React, { Component } from 'react';

class EventPractice extends Component{

    state = {
        message: ''
    }

    handleChange = (e) => {
        this.setState({
            message: e.target.value
        })
    }

    handleClick = () => {
        alert(this.state.message);
        this.setState({
            message: ''
        })
    }

    render() {
        return (
            <div>
                <h1>이벤트 연습</h1>
                <input 
                    type="text"
                    name="message"
                    placeholder="아무거나 입력해 보세요"
                    value={this.state.message}
                    onChange={this.handleChange}
                />
                <button onClick={this.handleClick}>확인</button>
            </div>
        )
    }
}

export default EventPractice;

--------------------------- 다중 input ---------------------------

EventPractice.js
import React, { Component } from 'react';

class EventPractice extends Component{

    state = {
        username: '',
        message: ''
    }

    handleChange = (e) => {
        this.setState({
            //이벤트 객체를 사용하여 함수 재활용
            //input 마다 이벤트를 만들 필요가 없다
            [e.target.name]: e.target.value
        })
    }

    handleClick = () => {
        alert(this.state.username + ": " + this.state.message);
        this.setState({
            username: '',
            message: ''
        })
    }

    render() {
        return (
            <div>
                <h1>이벤트 연습</h1>
                <input 
                    type="text"
                    name="username"
                    placeholder="사용자명"
                    value={this.state.username}
                    onChange={this.handleChange}
                />
                <input 
                    type="text"
                    name="message"
                    placeholder="아무거나 입력해 보세요"
                    value={this.state.message}
                    onChange={this.handleChange}
                />
                <button onClick={this.handleClick}>확인</button>
            </div>
        )
    }
}

export default EventPractice;

--------------------------- onKeyPress 이벤트 핸들링 ---------------------------

EventPractice.js
import React, { Component } from 'react';

class EventPractice extends Component{

    state = {
        username: '',
        message: ''
    }

    handleChange = (e) => {
        this.setState({
            //이벤트 객체를 사용하여 함수 재활용
            //input 마다 이벤트를 만들 필요가 없다
            [e.target.name]: e.target.value
        })
    }

    handleClick = () => {
        alert(this.state.username + ": " + this.state.message);
        this.setState({
            username: '',
            message: ''
        })
    }

    handleKeyPress = (e) => {
        if(e.key === 'Enter'){
            this.handleClick()
        }
    }

    render() {
        return (
            <div>
                <h1>이벤트 연습</h1>
                <input 
                    type="text"
                    name="username"
                    placeholder="사용자명"
                    value={this.state.username}
                    onChange={this.handleChange}
                />
                <input 
                    type="text"
                    name="message"
                    placeholder="아무거나 입력해 보세요"
                    value={this.state.message}
                    onChange={this.handleChange}
                    onKeyPress={this.handleKeyPress}
                />
                <button onClick={this.handleClick}>확인</button>
            </div>
        )
    }
}

export default EventPractice;