--------------------------- 복잡한 객체의 불변성 유지 ---------------------------
const object = {
    somewhere: {
        deep: {
            inside: 3,
            array: [1, 2, 3, 4]
        },
        bar: 2
    },
    foo: 1
}

somewhere.deep.inside 값을 4로 바꾸기
let nextObject = {
    ...object,
    somewhere: {
        ...object.somewhere,
        deep: {
            ...object.somewhere.deep,
            inside: 4
        }
    }
}

somewhere.deep.array에 5 추가
let nextObject = {
    ...object,
    somewhere: {
        ...object.somewhere,
        deep: {
            ...object.somewhere.deep,
            array: object.somewhere,deep.array.concat(5)
        }
    }
}


--------------------------- immer 라이브러리 사용 ---------------------------
설치
npm install immer

immer를 사용하지 않고 불변성 유지
App.js
import { useRef, useCallback, useState } from 'react'

const App = () => {
    const nextId = useRef(1)
    const [form, setForm] = useState({ name: '', username: '' })
    const [data, setData] = useState({
        array: [],
        uselessValue: null
    })

    const onChange = useCallback(
        e => {
            const { name, value } = e.target

            setForm({
                ...form,
                [name]: [value]
            })
        }, 
        [form]
    )

    const onSubmit = useCallback(
        e => {
            e.preventDefault()

            const info = {
                id: nextId.current,
                name: form.name,
                username: form.username
            }

            setData({
                ...data,
                array: data.array.concat(info)
            })

            setForm({
                name: '',
                username: ''
            })

            nextId.current += 1
        },
        [data, form.name, form.username]
    )

    const onRemove = useCallback(
        id => {
            setData({
                ...data,
                array: data.array.filter(info => info.id !== id)
            })
        },
        [data]
    )

    return (
        <div>
            <form onSubmit={onSubmit}>
                <input 
                    name='username'
                    placeholder='아이디'
                    value={form.username}
                    onChange={onChange}
                />
                <input 
                    name='name'
                    placeholder='이름'
                    value={form.name}
                    onChange={onChange}
                /> 
                <button type='submit'>등록</button>
            </form>
            <div>
                <ul>
                    {data.array.map(info => (
                        <li 
                            key={info.id} 
                            onClick={() => onRemove(info.id)}
                        >
                            {info.username} ({info.name})
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    )
}

export default App;


immer 사용법 예시
import produce from 'immer'
//첫 번째 파라미터 = 수정하고 싶은 상태
//두 번째 파라미터 = 상태를 어떻게 업데이트할지 정의하는 함수
//produce 함수가 불변성 유지를 대신해 주면서 새로운 상태를 생성
const nextState = produce(originalState, draft => {
    // 바꾸고 싶은 값 바꾸기
    draft.somewhere.deep.inside = 5
})


--------------------------- App 컴포넌트에 immer 적용 ---------------------------
App.js
import { useRef, useCallback, useState } from 'react'
import produce from 'immer'

const App = () => {
    const nextId = useRef(1)
    const [form, setForm] = useState({ name: '', username: '' })
    const [data, setData] = useState({
        array: [],
        uselessValue: null
    })

    const onChange = useCallback(
        e => {
            const { name, value } = e.target

            setForm(
                produce(form, draft => {
                    draft[name] = value
                })
            )
        }, 
        [form]
    )

    const onSubmit = useCallback(
        e => {
            e.preventDefault()

            const info = {
                id: nextId.current,
                name: form.name,
                username: form.username
            }

            setData(
                produce(data, draft => {
                    draft.array.push(info)
                })
            )

            setForm({
                name: '',
                username: ''
            })

            nextId.current += 1
        },
        [data, form.name, form.username]
    )

    //immer를 사용하면 복사가 아닌 상태의 값을 직접 수정하거나
    //기존 배열에 변화를 일으키는 push, splice 등의 함수를 사용해도 무방
    //immer를 사용한다고 해서 무조건 코드가 간결해지지는 않는다
    //onRemove는 filter 코드가 더 깔끔하므로 굳이 immer를 적용할 필요가 없다
    //immer는 불변성을 유지하는 코드가 복잡할 때만 사용해도 충분하다
    const onRemove = useCallback(
        id => {
            setData(
                produce(data, draft => {
                    draft.array.splice(draft.array.findIndex(info => info.id === id), 1)
                })
            )
        },
        [data]
    )

    return (
        <div>
            <form onSubmit={onSubmit}>
                <input 
                    name='username'
                    placeholder='아이디'
                    value={form.username}
                    onChange={onChange}
                />
                <input 
                    name='name'
                    placeholder='이름'
                    value={form.name}
                    onChange={onChange}
                /> 
                <button type='submit'>등록</button>
            </form>
            <div>
                <ul>
                    {data.array.map(info => (
                        <li 
                            key={info.id} 
                            onClick={() => onRemove(info.id)}
                        >
                            {info.username} ({info.name})
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    )
}

export default App;

--------------------------- useState의 함수형 업데이트와 immer 함께 쓰기 ---------------------------
immer에서 제공하는 produce 함수를 호출할 때 첫 번째 파라미터가 함수 형태라면 업데이트 함수를 반환
//예시
const update = produce(draft => {
    draft.value = 2
})

const originalState = {
    value: 1,
    foo: 'bar'
}

const nextState = update(originalState)
console.log(nextState) // { value: 2, foo: 'bar'}


App.js
import { useRef, useCallback, useState } from 'react'
import produce from 'immer'

const App = () => {
    const nextId = useRef(1)
    const [form, setForm] = useState({ name: '', username: '' })
    const [data, setData] = useState({
        array: [],
        uselessValue: null
    })

    const onChange = useCallback(
        e => {
            const { name, value } = e.target

            setForm(
                produce(draft => {
                    draft[name] = value
                })
            )
        }, [])

    const onSubmit = useCallback(
        e => {
            e.preventDefault()

            const info = {
                id: nextId.current,
                name: form.name,
                username: form.username
            }

            setData(
                produce(draft => {
                    draft.array.push(info)
                })
            )

            setForm({
                name: '',
                username: ''
            })

            nextId.current += 1
        },
        [form.name, form.username]
    )

    const onRemove = useCallback(
        id => {
            setData(
                produce(draft => {
                    draft.array.splice(draft.array.findIndex(info => info.id === id), 1)
                })
            )
        },[])

    return (
        <div>
            <form onSubmit={onSubmit}>
                <input 
                    name='username'
                    placeholder='아이디'
                    value={form.username}
                    onChange={onChange}
                />
                <input 
                    name='name'
                    placeholder='이름'
                    value={form.name}
                    onChange={onChange}
                /> 
                <button type='submit'>등록</button>
            </form>
            <div>
                <ul>
                    {data.array.map(info => (
                        <li 
                            key={info.id} 
                            onClick={() => onRemove(info.id)}
                        >
                            {info.username} ({info.name})
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    )
}

export default App;