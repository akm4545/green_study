--------------------------- 많은 데이터 렌더링 ---------------------------
App.js
import { useState, useRef, useCallback } from 'react'
import TodoTemplate from './components/TodoTemplate
import TodoInsert from './components/TodoInsert
import TodoList from './components/TodoList;

function createBulkTodos() {
    const array = [];
    
    for(let i=1; i<=2500; i++){
        array.push({
            id: i,
            text: `할 일 ${i}`,
            checked: false,
        })
    }

    return array;
}

const App = () => {    
    //함수 형식으로 전달 시 리렌더링될때마다 호출 createBulkTodos()
    //변수 형식으로 전달 시 컴포넌트 처음 렌더링시에만 실행
    const [todos, setTodos] = useState(createBulkTodos)

    const nextId = useRef(2501);

    const onInsert = useCallback(
        text => {
            const todo = {
                id: nextId.current,
                text,
                checked: false,
            };

            setTodos(todos.concat(todo))
            nextId.current += 1;
        },
        [todos],
    )

    const onRemove = useCallback(
        id => {
            setTodos(todos.filter(todo => todo.id !== id))
        },
        [todos],
    )

    const onToggle = useCallback(
        id => {
            setTodos(
                todos.map(todo => 
                    todo.id === id ? { ...todo, checked: !todo.checked} : todo
                ),
            )
        },
        [todos]
    )

    return (
        <TodoTemplate>
            <TodoInsert onInsert={onInsert} />
            <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>
        </TodoTemplate>
    )
}

export default App;

리액트 개발자 도구의 Components의 Profiler 탭을 열면 좌측 상단에 파란색 녹화 버튼을 누른다
이 버튼을 누르고 할 일 1 항목을 체크한 다음 화면에 변화가 반영되면 녹화 버튼을 누른다


--------------------------- React.memo를 사용하여 컴포넌트 성능 최적화 ---------------------------
TodoListItem.js
//추가
import React from 'react'
import {
    MdCheckBoxOutlineBlank,
    MdCheckBox,
    MdRemoveCircleOutline,
} from 'react-icons/md'
import cn from 'classname'
import './TodoListItme.scss'

const TodoListItme = ({ todo, onRemove, onToggle }) => {
    const { id, text, checked } = todo;

    return (
        <div className="TodoListItme">
            <div 
                className={cn('checkbox', { checked })}
                onClick={() => onToggle(id)}
            >
                {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}
                <div className="text">{text}</div>
            </div>
            <div className="remove" onClick={() => onRemove(id)}>
                <MdRemoveCircleOutline />
            </div>
        </div>
    )
}

//추가 (props가 바뀌지 않았다면 리렌더링 방지)
export default React.memo(TodoListItem);


--------------------------- onToggle, onRemove 최적화 ---------------------------
todos 배열이 업데이트 되면 onRemove와 onToggle 함수도 새롭게 바뀐다
배열 상태를 업데이트하는 과정에서 함수가 새로 만들어진다

useState에 상태 대신에 상태 업데이트를 어떻게 할지 정의해 주는 업데이트 함수를 넣을 수도 있다
이를 함수형 업데이트라고 부른다

예시
const [number, setNumber] = useState(0)
//prevNumber는 현재 number 값을 가리킨다.
//number + 1 대신 업데이트를 정의한 함수를 넣었다 그러면 useCallback을 사용할 때 두 번째 파라미터로 넣는 배열에 number를 넣지 않아도 된다
cosnt onIncrease = useCallback(
    () => setNumber(prevNumber => prevNumber + 1)
)

App.js
import { useState, useRef, useCallback } from 'react'
import TodoTemplate from './components/TodoTemplate
import TodoInsert from './components/TodoInsert
import TodoList from './components/TodoList;

function createBulkTodos() {
    const array = [];
    
    for(let i=1; i<=2500; i++){
        array.push({
            id: i,
            text: `할 일 ${i}`,
            checked: false,
        })
    }

    return array;
}

const App = () => {    
    //함수 형식으로 전달 시 리렌더링될때마다 호출 createBulkTodos()
    //변수 형식으로 전달 시 컴포넌트 처음 렌더링시에만 실행
    const [todos, setTodos] = useState(createBulkTodos)

    const nextId = useRef(2501);

    const onInsert = useCallback(
        text => {
            const todo = {
                id: nextId.current,
                text,
                checked: false,
            };

            //추가
            setTodos(todos => todos.concat(todo))
            nextId.current += 1;
        },
        [],
    )

    //추가
    const onRemove = useCallback(
        id => {
            setTodos(todos => todos.filter(todo => todo.id !== id))
        },
        [],
    )

    //추가
    const onToggle = useCallback(
        id => {
            setTodos(todos =>
                todos.map(todo => 
                    todo.id === id ? { ...todo, checked: !todo.checked} : todo
                ),
            )
        },
        []
    )

    return (
        <TodoTemplate>
            <TodoInsert onInsert={onInsert} />
            <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>
        </TodoTemplate>
    )
}

export default App;


useState의 함수형 업데이트 대신 useReducer를 사용해서 최적화 할 수 있다
App.js
import { useState, useRef, useCallback } from 'react'
import TodoTemplate from './components/TodoTemplate
import TodoInsert from './components/TodoInsert
import TodoList from './components/TodoList;

function createBulkTodos() {
    const array = [];
    
    for(let i=1; i<=2500; i++){
        array.push({
            id: i,
            text: `할 일 ${i}`,
            checked: false,
        })
    }

    return array;
}

//추가
function todoReducer(todos, action){
    switch(action.type){
        case 'INSERT':
            return todos.concat(action.todo)
        case 'REMOVE':
            return todos.filter(todo => todo.id !== action.id)
        case 'TOGGLE':
            return todos.map(todo =>
                todo.id === action.id ? { ...todo, checked: !todo.checked } : todo,
            )
        default:
            return todos;       
    }
}

const App = () => {    
    //추가
    //초기값에 undefined를 주고 세 번째 파라미터에 초기 상태를 만들어 주는 함수를 전달하면
    //컴포넌트 최초 렌더링 시에만 createBulkTodos 수행
    const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos)
    const nextId = useRef(2501);

    const onInsert = useCallback(
        text => {
            const todo = {
                id: nextId.current,
                text,
                checked: false,
            };

            //추가
            dispatch({ type: 'INSERT', todo })
            nextId.current += 1;
        },[])

    //추가
    const onRemove = useCallback(
        id => {
            dispatch({ type: 'REMOVE', id })
        },[])

    //추가
    const onToggle = useCallback(
        id => { 
            dispatch({ type: 'TOGGLE', id}) 
        },[])

    return (
        <TodoTemplate>
            <TodoInsert onInsert={onInsert} />
            <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>
        </TodoTemplate>
    )
}

export default App;

useReducer는 기존 코드를 많이 고쳐야 한다는 단점이 있지만 상태를 업데이트 하는 로직을 모아서 
컴포넌트 바깥에 둘 수 있다는 장점이 있다
성능상 비슷하기 때문에 취향에 따라 결정하면 된다


--------------------------- 불변성 ---------------------------
불변성이 지켜지지 않으면 객체 내부의 값이 새로워져도 바뀐것을 감지하지 못한다
그러면 React.memo에서 서로 비교하여 최적화하는 작업이 불가능하다

전개 연산자를 사용하여 객체나 배열 내부의 값을 복사할 때는 얕은 복사(shallow copy)를 하게 된다
내부의 값이 완전히 새로 복사되는 것이 아니라 가장 바깥쪽에 있는 값만 보가하게 된다
따라서 내부의 값이 객체 혹은 배열이라면 내부의 값 또한 따로 복사해주어야 한다

예시 코드
const todos = [{ id: 1, checked: true}, { id: 2, checked: true }]
const nextTodos = [...todos]

nextTodos[0].checked = false
//아직까지는 똑같은 객체
console.log(todos[0] === nextTodos[0]) 

nextTodos[0] = {
    ...nextTodos[0],
    checked: false
}

//새로운 객체 할당
console.log(todos[0] === nextTodos[0])

복잡한 객체의 불변성을 지키면서 값 할당은 다음과 같다
const nextComplexObject = {
    ...complexObject,
    objectInside: {
        ...complexObject.objectInside
        enabled: false
    }
}

console.log(complexObject === nextComplexObject) // false
console.log(complexObject.objectInside === nextComplexObject.objectInside) // false


--------------------------- todoList 컴포넌트 최적화 ---------------------------
리스트에 관련된 컴포넌트 최적화시 리스트 내부에서 사용하는 컴포넌트도 최적화해야 하고 리스트로 사용되는 컴포넌트 자체도 최적화하는것이 좋다

TodoList.js
//추가
import React from 'react'
import TodoListItme from './TodoListItme'
import './TodoList.scss'

const TodoList = ({ todos, onRemove, onToggle }) => {
    return (
        <div className="TodoList">
            //추가
            {todos.map(todo => (
                <TodoListItem 
                    todo={todo} 
                    key={todo.id} 
                    onRemove={onRemove}
                    onToggle={onToggle}
                />
            ))}
        </div>
    )
}

//추가
export default React.memo(TodoList)

위 코드는 현재 프로젝트 성능에 전혀 영향을 주지 않는다
TodoList 컴포넌트의 부모 컴포넌트인 App 컴포넌트가 리렌더링되는 유일한 이유가 todos 배열이 업데이트될 때이기 때문이다
즉 지금 TodoList 컴포넌트는 불필요한 리렌더링이 발생하지 않는다
하지만 App 컴포넌트에 다른 state가 추가되어 해당 값들이 업데이트될 때는 TodoList 컴포넌트가 불필요한 렌더링을 할 수도 있다
그렇기 때문에 미리 React.memo를 사용하여 최적화한 것이다


--------------------------- react-virtualized를 사용한 최적화 ---------------------------
컴포넌트가 맨 처음 렌더링될 때 2500개의 컴포넌트 중 약 2490개의 컴포넌트는 노출되지 않는다
그러므로 스크롤 전에 2490개의 데이터에 관한 작업은 시스템 자원 낭비다

react-virtualized를 사용하면 렌더링 하지 않고 크기만 차지하게끔 할 수 있다
스크롤 시 해당 위치에서 보여 주어야 할 컴포넌트를 자연스럽게 렌더링 시킨다

설치
npm install react-virtualized

최적화 수행 전 각 항목의 실제 크기를 px 단위로 알아내야 한다 (크롬 개발자 모드 사용)

TodoList.js
//추가
import React, { useCallback } from 'react'
import { List } from 'react-virtualized'

import TodoListItme from './TodoListItme'
import './TodoList.scss'

const TodoList = ({ todos, onRemove, onToggle }) => {
    //추가
    const rowRenderer = useCallback(
        ({ index, key, style}) => (
            const todo = todos[index]

            return (
                <TodoListItem 
                    todo={todo}
                    key={key}
                    onRemove={onRemove}
                    onToggle={onToggle}
                    style={style}
                />
            )
        ), [onRemove, onToggle, todos])

    return (
        <List 
            className='TodoList'
            width={512} //전체 크기
            height={513} //전체 높이
            rowCount={todos.length} //항목 개수
            rowHeight={57} //항목 높이
            rowRenderer={rewRenderer} //항목을 렌더링할 때 쓰는 함수
            list={todos} //배열
            style={( outline: 'none' )} //List에 기본 적용되는 outLine스타일 제거
        />
    )       
}

export default React.memo(TodoList)


//스타일이 깨지는 현상 수정
TodoListItem.js
import React from 'react'
import {
    MdCheckBoxOutlineBlank,
    MdCheckBox,
    MdRemoveCircleOutline,
} from 'react-icons/md'
import cn from 'classname'
import './TodoListItme.scss'

//추가
const TodoListItme = ({ todo, onRemove, onToggle }) => {
    const { id, text, checked } = todo;

    return (
        //추가
        <div 
            className="TodoListItem-virtualized" 
            style={style}
        >
             <div className="TodoListItme">
                <div 
                    className={cn('checkbox', { checked })}
                    onClick={() => onToggle(id)}
                >
                    {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}
                    <div className="text">{text}</div>
                </div>
                <div className="remove" onClick={() => onRemove(id)}>
                    <MdRemoveCircleOutline />
                </div>
            </div>
        </div>
    )
}

export default React.memo(TodoListItem);


TodoListItem.scss
//&:nth-child(evne) 삭제 
//추가
.TodoListItem-virtualized {
    & + & {
        border-top: 1px solid #dee2e6;
    }
    &:nth-child(even){
        background: #f8f9fa;
    }
}